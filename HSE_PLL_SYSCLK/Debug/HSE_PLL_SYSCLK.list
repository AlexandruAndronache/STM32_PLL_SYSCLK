
HSE_PLL_SYSCLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002d1c  08002d1c  00003d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002db8  08002db8  00003db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc0  08002dc0  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00003dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002dc8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000005c  08002e24  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08002e24  00004274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e0a  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001565  00000000  00000000  0000be96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0000d400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004de  00000000  00000000  0000da60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002100b  00000000  00000000  0000df3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095cb  00000000  00000000  0002ef49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7ee2  00000000  00000000  00038514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001003f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e1c  00000000  00000000  0010043c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00102258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002d04 	.word	0x08002d04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002d04 	.word	0x08002d04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:

#include "main_app.h"


void SysTick_Handler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 fa6c 	bl	8000a90 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b8:	f000 fbb8 	bl	8000d2c <HAL_SYSTICK_IRQHandler>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <main>:
uint8_t FLatency = 0;



int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0


	HAL_Init();
 80005c4:	f000 fa12 	bl	80009ec <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80005c8:	2032      	movs	r0, #50	@ 0x32
 80005ca:	f000 f875 	bl	80006b8 <SystemClock_Config_HSE>

	UART2_Init();
 80005ce:	f000 f907 	bl	80007e0 <UART2_Init>
		memset(msg,0,sizeof(msg));
 80005d2:	2264      	movs	r2, #100	@ 0x64
 80005d4:	2100      	movs	r1, #0
 80005d6:	4832      	ldr	r0, [pc, #200]	@ (80006a0 <main+0xe0>)
 80005d8:	f001 ff14 	bl	8002404 <memset>
		msg[sizeof(msg) - 1] = '\0';
 80005dc:	4b30      	ldr	r3, [pc, #192]	@ (80006a0 <main+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
		sprintf(msg,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
 80005e4:	f000 fe5e 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	492d      	ldr	r1, [pc, #180]	@ (80006a4 <main+0xe4>)
 80005ee:	482c      	ldr	r0, [pc, #176]	@ (80006a0 <main+0xe0>)
 80005f0:	f001 fee8 	bl	80023c4 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80005f4:	482a      	ldr	r0, [pc, #168]	@ (80006a0 <main+0xe0>)
 80005f6:	f7ff fe0b 	bl	8000210 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	4927      	ldr	r1, [pc, #156]	@ (80006a0 <main+0xe0>)
 8000604:	4828      	ldr	r0, [pc, #160]	@ (80006a8 <main+0xe8>)
 8000606:	f001 fb68 	bl	8001cda <HAL_UART_Transmit>

		memset(msg,0,sizeof(msg));
 800060a:	2264      	movs	r2, #100	@ 0x64
 800060c:	2100      	movs	r1, #0
 800060e:	4824      	ldr	r0, [pc, #144]	@ (80006a0 <main+0xe0>)
 8000610:	f001 fef8 	bl	8002404 <memset>
		sprintf(msg,"HCLK   : %ldHz \r\n",HAL_RCC_GetHCLKFreq());
 8000614:	f000 fe12 	bl	800123c <HAL_RCC_GetHCLKFreq>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4923      	ldr	r1, [pc, #140]	@ (80006ac <main+0xec>)
 800061e:	4820      	ldr	r0, [pc, #128]	@ (80006a0 <main+0xe0>)
 8000620:	f001 fed0 	bl	80023c4 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000624:	481e      	ldr	r0, [pc, #120]	@ (80006a0 <main+0xe0>)
 8000626:	f7ff fdf3 	bl	8000210 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	b29a      	uxth	r2, r3
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	491b      	ldr	r1, [pc, #108]	@ (80006a0 <main+0xe0>)
 8000634:	481c      	ldr	r0, [pc, #112]	@ (80006a8 <main+0xe8>)
 8000636:	f001 fb50 	bl	8001cda <HAL_UART_Transmit>

		memset(msg,0,sizeof(msg));
 800063a:	2264      	movs	r2, #100	@ 0x64
 800063c:	2100      	movs	r1, #0
 800063e:	4818      	ldr	r0, [pc, #96]	@ (80006a0 <main+0xe0>)
 8000640:	f001 fee0 	bl	8002404 <memset>
		sprintf(msg,"PCLK1  : %ldHz \r\n",HAL_RCC_GetPCLK1Freq());
 8000644:	f000 fe06 	bl	8001254 <HAL_RCC_GetPCLK1Freq>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	4918      	ldr	r1, [pc, #96]	@ (80006b0 <main+0xf0>)
 800064e:	4814      	ldr	r0, [pc, #80]	@ (80006a0 <main+0xe0>)
 8000650:	f001 feb8 	bl	80023c4 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000654:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <main+0xe0>)
 8000656:	f7ff fddb 	bl	8000210 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	490f      	ldr	r1, [pc, #60]	@ (80006a0 <main+0xe0>)
 8000664:	4810      	ldr	r0, [pc, #64]	@ (80006a8 <main+0xe8>)
 8000666:	f001 fb38 	bl	8001cda <HAL_UART_Transmit>

		memset(msg,0,sizeof(msg));
 800066a:	2264      	movs	r2, #100	@ 0x64
 800066c:	2100      	movs	r1, #0
 800066e:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <main+0xe0>)
 8000670:	f001 fec8 	bl	8002404 <memset>
		sprintf(msg,"PCLK2  : %ldHz \r\n\r\n",HAL_RCC_GetPCLK2Freq());
 8000674:	f000 fe02 	bl	800127c <HAL_RCC_GetPCLK2Freq>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	490d      	ldr	r1, [pc, #52]	@ (80006b4 <main+0xf4>)
 800067e:	4808      	ldr	r0, [pc, #32]	@ (80006a0 <main+0xe0>)
 8000680:	f001 fea0 	bl	80023c4 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000684:	4806      	ldr	r0, [pc, #24]	@ (80006a0 <main+0xe0>)
 8000686:	f7ff fdc3 	bl	8000210 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	4903      	ldr	r1, [pc, #12]	@ (80006a0 <main+0xe0>)
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <main+0xe8>)
 8000696:	f001 fb20 	bl	8001cda <HAL_UART_Transmit>



	while(1);
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <main+0xda>
 800069e:	bf00      	nop
 80006a0:	200000bc 	.word	0x200000bc
 80006a4:	08002d1c 	.word	0x08002d1c
 80006a8:	20000078 	.word	0x20000078
 80006ac:	08002d30 	.word	0x08002d30
 80006b0:	08002d44 	.word	0x08002d44
 80006b4:	08002d58 	.word	0x08002d58

080006b8 <SystemClock_Config_HSE>:

	return 0;
}

void SystemClock_Config_HSE(uint8_t clock_freq)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
		RCC_ClkInitTypeDef clk_init;

		osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
		osc_init.HSEState = RCC_HSE_BYPASS;
 80006c6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006ca:	623b      	str	r3, [r7, #32]
		osc_init.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	@ 0x34
		osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006d4:	63bb      	str	r3, [r7, #56]	@ 0x38

		switch(clock_freq)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b78      	cmp	r3, #120	@ 0x78
 80006da:	d038      	beq.n	800074e <SystemClock_Config_HSE+0x96>
 80006dc:	2b78      	cmp	r3, #120	@ 0x78
 80006de:	dc76      	bgt.n	80007ce <SystemClock_Config_HSE+0x116>
 80006e0:	2b32      	cmp	r3, #50	@ 0x32
 80006e2:	d002      	beq.n	80006ea <SystemClock_Config_HSE+0x32>
 80006e4:	2b50      	cmp	r3, #80	@ 0x50
 80006e6:	d019      	beq.n	800071c <SystemClock_Config_HSE+0x64>
		    FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}

		default:
			return;
 80006e8:	e071      	b.n	80007ce <SystemClock_Config_HSE+0x116>
			osc_init.PLL.PLLM = 8;
 80006ea:	2308      	movs	r3, #8
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 100;
 80006ee:	2364      	movs	r3, #100	@ 0x64
 80006f0:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLQ = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLP = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
		    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006fe:	230f      	movs	r3, #15
 8000700:	60bb      	str	r3, [r7, #8]
		    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	60fb      	str	r3, [r7, #12]
		    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
		    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070e:	617b      	str	r3, [r7, #20]
		    clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
		    FLatency = FLASH_ACR_LATENCY_1WS;;
 8000714:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <SystemClock_Config_HSE+0x120>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
			break;
 800071a:	e032      	b.n	8000782 <SystemClock_Config_HSE+0xca>
			osc_init.PLL.PLLM = 8;
 800071c:	2308      	movs	r3, #8
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 160;
 8000720:	23a0      	movs	r3, #160	@ 0xa0
 8000722:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLQ = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLR = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLP = 2;
 800072c:	2302      	movs	r3, #2
 800072e:	647b      	str	r3, [r7, #68]	@ 0x44
		    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000730:	230f      	movs	r3, #15
 8000732:	60bb      	str	r3, [r7, #8]
		    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	60fb      	str	r3, [r7, #12]
		    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
		    clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	617b      	str	r3, [r7, #20]
		    clk_init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
		    FLatency = FLASH_ACR_LATENCY_2WS;
 8000746:	4b24      	ldr	r3, [pc, #144]	@ (80007d8 <SystemClock_Config_HSE+0x120>)
 8000748:	2202      	movs	r2, #2
 800074a:	701a      	strb	r2, [r3, #0]
			break;
 800074c:	e019      	b.n	8000782 <SystemClock_Config_HSE+0xca>
			osc_init.PLL.PLLM = 8;
 800074e:	2308      	movs	r3, #8
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
			osc_init.PLL.PLLN = 240;
 8000752:	23f0      	movs	r3, #240	@ 0xf0
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLQ = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLR = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLP = 4;
 800075e:	2304      	movs	r3, #4
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
		    clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
		    clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
		    clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
		    clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000772:	617b      	str	r3, [r7, #20]
		    clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	61bb      	str	r3, [r7, #24]
		    FLatency = FLASH_ACR_LATENCY_3WS;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <SystemClock_Config_HSE+0x120>)
 800077c:	2203      	movs	r2, #3
 800077e:	701a      	strb	r2, [r3, #0]
			break;
 8000780:	bf00      	nop
		}

		if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4618      	mov	r0, r3
 8000788:	f000 ffbc 	bl	8001704 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config_HSE+0xde>
			{
			Error_handler();
 8000792:	f000 f84b 	bl	800082c <Error_handler>
			}

		if(HAL_RCC_ClockConfig( &clk_init, FLatency) != HAL_OK)
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <SystemClock_Config_HSE+0x120>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fc64 	bl	8001070 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config_HSE+0xfa>
			{
				Error_handler();
 80007ae:	f000 f83d 	bl	800082c <Error_handler>
			}

		//Systick frequency
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80007b2:	f000 fd43 	bl	800123c <HAL_RCC_GetHCLKFreq>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <SystemClock_Config_HSE+0x124>)
 80007ba:	fba2 2303 	umull	r2, r3, r2, r3
 80007be:	099b      	lsrs	r3, r3, #6
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fa8a 	bl	8000cda <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007c6:	2004      	movs	r0, #4
 80007c8:	f000 fa94 	bl	8000cf4 <HAL_SYSTICK_CLKSourceConfig>
 80007cc:	e000      	b.n	80007d0 <SystemClock_Config_HSE+0x118>
			return;
 80007ce:	bf00      	nop

}
 80007d0:	3750      	adds	r7, #80	@ 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000120 	.word	0x20000120
 80007dc:	10624dd3 	.word	0x10624dd3

080007e0 <UART2_Init>:
//
//}


void UART2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <UART2_Init+0x44>)
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <UART2_Init+0x48>)
 80007e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <UART2_Init+0x44>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <UART2_Init+0x44>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <UART2_Init+0x44>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <UART2_Init+0x44>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <UART2_Init+0x44>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <UART2_Init+0x44>)
 800080c:	220c      	movs	r2, #12
 800080e:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <UART2_Init+0x44>)
 8000812:	f001 fa15 	bl	8001c40 <HAL_UART_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 800081c:	f000 f806 	bl	800082c <Error_handler>
	}


}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000078 	.word	0x20000078
 8000828:	40004400 	.word	0x40004400

0800082c <Error_handler>:


void Error_handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
	while(1);
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_handler+0x4>

08000834 <HAL_MspInit>:


#include "main_app.h"

void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 fa19 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800083e:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <HAL_MspInit+0x40>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000842:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <HAL_MspInit+0x40>)
 8000844:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000848:	6253      	str	r3, [r2, #36]	@ 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	f06f 000b 	mvn.w	r0, #11
 8000852:	f000 fa18 	bl	8000c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	f06f 000a 	mvn.w	r0, #10
 800085e:	f000 fa12 	bl	8000c86 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	f06f 0009 	mvn.w	r0, #9
 800086a:	f000 fa0c 	bl	8000c86 <HAL_NVIC_SetPriority>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	@ 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <HAL_UART_MspInit+0x88>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a1d      	ldr	r2, [pc, #116]	@ (8000900 <HAL_UART_MspInit+0x88>)
 800088a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <HAL_UART_MspInit+0x88>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a4:	4a16      	ldr	r2, [pc, #88]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <HAL_UART_MspInit+0x88>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80008b8:	2304      	movs	r3, #4
 80008ba:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80008c8:	2307      	movs	r3, #7
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <HAL_UART_MspInit+0x8c>)
 80008d4:	f000 fa38 	bl	8000d48 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80008d8:	2308      	movs	r3, #8
 80008da:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4808      	ldr	r0, [pc, #32]	@ (8000904 <HAL_UART_MspInit+0x8c>)
 80008e4:	f000 fa30 	bl	8000d48 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008e8:	2026      	movs	r0, #38	@ 0x26
 80008ea:	f000 f9e8 	bl	8000cbe <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210f      	movs	r1, #15
 80008f2:	2026      	movs	r0, #38	@ 0x26
 80008f4:	f000 f9c7 	bl	8000c86 <HAL_NVIC_SetPriority>

}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	@ 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f001 fd6c 	bl	8002414 <__errno>
 800093c:	4603      	mov	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <_sbrk+0x64>)
 8000958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20020000 	.word	0x20020000
 8000968:	00000400 	.word	0x00000400
 800096c:	20000124 	.word	0x20000124
 8000970:	20000278 	.word	0x20000278

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800099c:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800099e:	490e      	ldr	r1, [pc, #56]	@ (80009d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a0:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009b4:	4c0b      	ldr	r4, [pc, #44]	@ (80009e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009c2:	f7ff ffd7 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f001 fd2b 	bl	8002420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fdf9 	bl	80005c0 <main>
  bx  lr    
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009dc:	08002dc8 	.word	0x08002dc8
  ldr r2, =_sbss
 80009e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009e4:	20000274 	.word	0x20000274

080009e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <HAL_Init+0x40>)
 80009f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009fc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <HAL_Init+0x40>)
 8000a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <HAL_Init+0x40>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	@ (8000a2c <HAL_Init+0x40>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f92b 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f7ff ff08 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023c00 	.word	0x40023c00

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f943 	bl	8000cda <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f90b 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	@ (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000128 	.word	0x20000128

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	@ (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000128 	.word	0x20000128

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	@ (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	@ (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	@ (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	@ (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	@ (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	@ 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	@ 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff29 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff3e 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff31 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa2 	bl	8000c2c <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d106      	bne.n	8000d10 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a08      	ldr	r2, [pc, #32]	@ (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d0e:	e005      	b.n	8000d1c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d16:	f023 0304 	bic.w	r3, r3, #4
 8000d1a:	6013      	str	r3, [r2, #0]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d30:	f000 f802 	bl	8000d38 <HAL_SYSTICK_Callback>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e165      	b.n	8001030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8154 	bne.w	800102a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80ae 	beq.w	800102a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a5c      	ldr	r2, [pc, #368]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b5a      	ldr	r3, [pc, #360]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a58      	ldr	r2, [pc, #352]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	@ (8001050 <HAL_GPIO_Init+0x308>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d025      	beq.n	8000f62 <HAL_GPIO_Init+0x21a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	@ (8001054 <HAL_GPIO_Init+0x30c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01f      	beq.n	8000f5e <HAL_GPIO_Init+0x216>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	@ (8001058 <HAL_GPIO_Init+0x310>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x212>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	@ (800105c <HAL_GPIO_Init+0x314>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x20e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	@ (8001060 <HAL_GPIO_Init+0x318>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x20a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4a      	ldr	r2, [pc, #296]	@ (8001064 <HAL_GPIO_Init+0x31c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x206>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	@ (8001068 <HAL_GPIO_Init+0x320>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x202>
 8000f46:	2306      	movs	r3, #6
 8000f48:	e00c      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e00a      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f4e:	2305      	movs	r3, #5
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f62:	2300      	movs	r3, #0
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f82:	4b3a      	ldr	r3, [pc, #232]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa6:	4a31      	ldr	r2, [pc, #196]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd0:	4a26      	ldr	r2, [pc, #152]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <HAL_GPIO_Init+0x324>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a11      	ldr	r2, [pc, #68]	@ (800106c <HAL_GPIO_Init+0x324>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f67f ae96 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40013c00 	.word	0x40013c00

08001070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0cc      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001084:	4b68      	ldr	r3, [pc, #416]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 030f 	and.w	r3, r3, #15
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d90c      	bls.n	80010ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001092:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800109a:	4b63      	ldr	r3, [pc, #396]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0b8      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d020      	beq.n	80010fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4a58      	ldr	r2, [pc, #352]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010dc:	4b53      	ldr	r3, [pc, #332]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a52      	ldr	r2, [pc, #328]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e8:	4b50      	ldr	r3, [pc, #320]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	494d      	ldr	r1, [pc, #308]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d044      	beq.n	8001190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b47      	ldr	r3, [pc, #284]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d119      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e07f      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d003      	beq.n	800112e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800112a:	2b03      	cmp	r3, #3
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112e:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e06f      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e067      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114e:	4b37      	ldr	r3, [pc, #220]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f023 0203 	bic.w	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4934      	ldr	r1, [pc, #208]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	4313      	orrs	r3, r2
 800115e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001160:	f7ff fcaa 	bl	8000ab8 <HAL_GetTick>
 8001164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	e00a      	b.n	800117e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f7ff fca6 	bl	8000ab8 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e04f      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 020c 	and.w	r2, r3, #12
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	429a      	cmp	r2, r3
 800118e:	d1eb      	bne.n	8001168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001190:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d20c      	bcs.n	80011b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d001      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e032      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4916      	ldr	r1, [pc, #88]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d009      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	490e      	ldr	r1, [pc, #56]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011f6:	f000 f855 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	490a      	ldr	r1, [pc, #40]	@ (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	5ccb      	ldrb	r3, [r1, r3]
 800120a:	fa22 f303 	lsr.w	r3, r2, r3
 800120e:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_RCC_ClockConfig+0x1c8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fc0a 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00
 800122c:	40023800 	.word	0x40023800
 8001230:	08002d6c 	.word	0x08002d6c
 8001234:	20000000 	.word	0x20000000
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <HAL_RCC_GetHCLKFreq+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000000 	.word	0x20000000

08001254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001258:	f7ff fff0 	bl	800123c <HAL_RCC_GetHCLKFreq>
 800125c:	4602      	mov	r2, r0
 800125e:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	0a9b      	lsrs	r3, r3, #10
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	4903      	ldr	r1, [pc, #12]	@ (8001278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800126a:	5ccb      	ldrb	r3, [r1, r3]
 800126c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	08002d7c 	.word	0x08002d7c

0800127c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001280:	f7ff ffdc 	bl	800123c <HAL_RCC_GetHCLKFreq>
 8001284:	4602      	mov	r2, r0
 8001286:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	0b5b      	lsrs	r3, r3, #13
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	4903      	ldr	r1, [pc, #12]	@ (80012a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001292:	5ccb      	ldrb	r3, [r1, r3]
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001298:	4618      	mov	r0, r3
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	08002d7c 	.word	0x08002d7c

080012a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012a8:	b0ae      	sub	sp, #184	@ 0xb8
 80012aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ca:	4bcb      	ldr	r3, [pc, #812]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	f200 8206 	bhi.w	80016e4 <HAL_RCC_GetSysClockFreq+0x440>
 80012d8:	a201      	add	r2, pc, #4	@ (adr r2, 80012e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	08001315 	.word	0x08001315
 80012e4:	080016e5 	.word	0x080016e5
 80012e8:	080016e5 	.word	0x080016e5
 80012ec:	080016e5 	.word	0x080016e5
 80012f0:	0800131d 	.word	0x0800131d
 80012f4:	080016e5 	.word	0x080016e5
 80012f8:	080016e5 	.word	0x080016e5
 80012fc:	080016e5 	.word	0x080016e5
 8001300:	08001325 	.word	0x08001325
 8001304:	080016e5 	.word	0x080016e5
 8001308:	080016e5 	.word	0x080016e5
 800130c:	080016e5 	.word	0x080016e5
 8001310:	08001515 	.word	0x08001515
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001314:	4bb9      	ldr	r3, [pc, #740]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800131a:	e1e7      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800131c:	4bb8      	ldr	r3, [pc, #736]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x35c>)
 800131e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001322:	e1e3      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001324:	4bb4      	ldr	r3, [pc, #720]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800132c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001330:	4bb1      	ldr	r3, [pc, #708]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d071      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800133c:	4bae      	ldr	r3, [pc, #696]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	2200      	movs	r2, #0
 8001344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001348:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800134c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800135e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001362:	4622      	mov	r2, r4
 8001364:	462b      	mov	r3, r5
 8001366:	f04f 0000 	mov.w	r0, #0
 800136a:	f04f 0100 	mov.w	r1, #0
 800136e:	0159      	lsls	r1, r3, #5
 8001370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001374:	0150      	lsls	r0, r2, #5
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4621      	mov	r1, r4
 800137c:	1a51      	subs	r1, r2, r1
 800137e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001380:	4629      	mov	r1, r5
 8001382:	eb63 0301 	sbc.w	r3, r3, r1
 8001386:	647b      	str	r3, [r7, #68]	@ 0x44
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001394:	4649      	mov	r1, r9
 8001396:	018b      	lsls	r3, r1, #6
 8001398:	4641      	mov	r1, r8
 800139a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800139e:	4641      	mov	r1, r8
 80013a0:	018a      	lsls	r2, r1, #6
 80013a2:	4641      	mov	r1, r8
 80013a4:	1a51      	subs	r1, r2, r1
 80013a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80013a8:	4649      	mov	r1, r9
 80013aa:	eb63 0301 	sbc.w	r3, r3, r1
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80013bc:	4649      	mov	r1, r9
 80013be:	00cb      	lsls	r3, r1, #3
 80013c0:	4641      	mov	r1, r8
 80013c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013c6:	4641      	mov	r1, r8
 80013c8:	00ca      	lsls	r2, r1, #3
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	4622      	mov	r2, r4
 80013d2:	189b      	adds	r3, r3, r2
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80013d6:	462b      	mov	r3, r5
 80013d8:	460a      	mov	r2, r1
 80013da:	eb42 0303 	adc.w	r3, r2, r3
 80013de:	637b      	str	r3, [r7, #52]	@ 0x34
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80013ec:	4629      	mov	r1, r5
 80013ee:	024b      	lsls	r3, r1, #9
 80013f0:	4621      	mov	r1, r4
 80013f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013f6:	4621      	mov	r1, r4
 80013f8:	024a      	lsls	r2, r1, #9
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001402:	2200      	movs	r2, #0
 8001404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800140c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001410:	f7fe ff56 	bl	80002c0 <__aeabi_uldivmod>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4613      	mov	r3, r2
 800141a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800141e:	e067      	b.n	80014f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001420:	4b75      	ldr	r3, [pc, #468]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	099b      	lsrs	r3, r3, #6
 8001426:	2200      	movs	r2, #0
 8001428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800142c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001430:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001438:	67bb      	str	r3, [r7, #120]	@ 0x78
 800143a:	2300      	movs	r3, #0
 800143c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800143e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001442:	4622      	mov	r2, r4
 8001444:	462b      	mov	r3, r5
 8001446:	f04f 0000 	mov.w	r0, #0
 800144a:	f04f 0100 	mov.w	r1, #0
 800144e:	0159      	lsls	r1, r3, #5
 8001450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001454:	0150      	lsls	r0, r2, #5
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4621      	mov	r1, r4
 800145c:	1a51      	subs	r1, r2, r1
 800145e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001460:	4629      	mov	r1, r5
 8001462:	eb63 0301 	sbc.w	r3, r3, r1
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001474:	4649      	mov	r1, r9
 8001476:	018b      	lsls	r3, r1, #6
 8001478:	4641      	mov	r1, r8
 800147a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800147e:	4641      	mov	r1, r8
 8001480:	018a      	lsls	r2, r1, #6
 8001482:	4641      	mov	r1, r8
 8001484:	ebb2 0a01 	subs.w	sl, r2, r1
 8001488:	4649      	mov	r1, r9
 800148a:	eb63 0b01 	sbc.w	fp, r3, r1
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800149a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800149e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014a2:	4692      	mov	sl, r2
 80014a4:	469b      	mov	fp, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	eb1a 0303 	adds.w	r3, sl, r3
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	462b      	mov	r3, r5
 80014b0:	eb4b 0303 	adc.w	r3, fp, r3
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014c2:	4629      	mov	r1, r5
 80014c4:	028b      	lsls	r3, r1, #10
 80014c6:	4621      	mov	r1, r4
 80014c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014cc:	4621      	mov	r1, r4
 80014ce:	028a      	lsls	r2, r1, #10
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014d8:	2200      	movs	r2, #0
 80014da:	673b      	str	r3, [r7, #112]	@ 0x70
 80014dc:	677a      	str	r2, [r7, #116]	@ 0x74
 80014de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014e2:	f7fe feed 	bl	80002c0 <__aeabi_uldivmod>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4613      	mov	r3, r2
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014f0:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	0c1b      	lsrs	r3, r3, #16
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	3301      	adds	r3, #1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001512:	e0eb      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001514:	4b38      	ldr	r3, [pc, #224]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800151c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001520:	4b35      	ldr	r3, [pc, #212]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d06b      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800152c:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	2200      	movs	r2, #0
 8001534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001536:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800153a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800153e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001540:	2300      	movs	r3, #0
 8001542:	667b      	str	r3, [r7, #100]	@ 0x64
 8001544:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001548:	4622      	mov	r2, r4
 800154a:	462b      	mov	r3, r5
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	f04f 0100 	mov.w	r1, #0
 8001554:	0159      	lsls	r1, r3, #5
 8001556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800155a:	0150      	lsls	r0, r2, #5
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4621      	mov	r1, r4
 8001562:	1a51      	subs	r1, r2, r1
 8001564:	61b9      	str	r1, [r7, #24]
 8001566:	4629      	mov	r1, r5
 8001568:	eb63 0301 	sbc.w	r3, r3, r1
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800157a:	4659      	mov	r1, fp
 800157c:	018b      	lsls	r3, r1, #6
 800157e:	4651      	mov	r1, sl
 8001580:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001584:	4651      	mov	r1, sl
 8001586:	018a      	lsls	r2, r1, #6
 8001588:	4651      	mov	r1, sl
 800158a:	ebb2 0801 	subs.w	r8, r2, r1
 800158e:	4659      	mov	r1, fp
 8001590:	eb63 0901 	sbc.w	r9, r3, r1
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015a8:	4690      	mov	r8, r2
 80015aa:	4699      	mov	r9, r3
 80015ac:	4623      	mov	r3, r4
 80015ae:	eb18 0303 	adds.w	r3, r8, r3
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	462b      	mov	r3, r5
 80015b6:	eb49 0303 	adc.w	r3, r9, r3
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015c8:	4629      	mov	r1, r5
 80015ca:	024b      	lsls	r3, r1, #9
 80015cc:	4621      	mov	r1, r4
 80015ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015d2:	4621      	mov	r1, r4
 80015d4:	024a      	lsls	r2, r1, #9
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015de:	2200      	movs	r2, #0
 80015e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80015e8:	f7fe fe6a 	bl	80002c0 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015f6:	e065      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x420>
 80015f8:	40023800 	.word	0x40023800
 80015fc:	00f42400 	.word	0x00f42400
 8001600:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x458>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	2200      	movs	r2, #0
 800160c:	4618      	mov	r0, r3
 800160e:	4611      	mov	r1, r2
 8001610:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001614:	653b      	str	r3, [r7, #80]	@ 0x50
 8001616:	2300      	movs	r3, #0
 8001618:	657b      	str	r3, [r7, #84]	@ 0x54
 800161a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800161e:	4642      	mov	r2, r8
 8001620:	464b      	mov	r3, r9
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	0159      	lsls	r1, r3, #5
 800162c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001630:	0150      	lsls	r0, r2, #5
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4641      	mov	r1, r8
 8001638:	1a51      	subs	r1, r2, r1
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	4649      	mov	r1, r9
 800163e:	eb63 0301 	sbc.w	r3, r3, r1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001650:	4659      	mov	r1, fp
 8001652:	018b      	lsls	r3, r1, #6
 8001654:	4651      	mov	r1, sl
 8001656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800165a:	4651      	mov	r1, sl
 800165c:	018a      	lsls	r2, r1, #6
 800165e:	4651      	mov	r1, sl
 8001660:	1a54      	subs	r4, r2, r1
 8001662:	4659      	mov	r1, fp
 8001664:	eb63 0501 	sbc.w	r5, r3, r1
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	00eb      	lsls	r3, r5, #3
 8001672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001676:	00e2      	lsls	r2, r4, #3
 8001678:	4614      	mov	r4, r2
 800167a:	461d      	mov	r5, r3
 800167c:	4643      	mov	r3, r8
 800167e:	18e3      	adds	r3, r4, r3
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	464b      	mov	r3, r9
 8001684:	eb45 0303 	adc.w	r3, r5, r3
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001696:	4629      	mov	r1, r5
 8001698:	028b      	lsls	r3, r1, #10
 800169a:	4621      	mov	r1, r4
 800169c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016a0:	4621      	mov	r1, r4
 80016a2:	028a      	lsls	r2, r1, #10
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016ac:	2200      	movs	r2, #0
 80016ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016b6:	f7fe fe03 	bl	80002c0 <__aeabi_uldivmod>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4613      	mov	r3, r2
 80016c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x458>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	0f1b      	lsrs	r3, r3, #28
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80016d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016e2:	e003      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	37b8      	adds	r7, #184	@ 0xb8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	00f42400 	.word	0x00f42400

08001704 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e28d      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8083 	beq.w	800182a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001724:	4b94      	ldr	r3, [pc, #592]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b04      	cmp	r3, #4
 800172e:	d019      	beq.n	8001764 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001730:	4b91      	ldr	r3, [pc, #580]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001738:	2b08      	cmp	r3, #8
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800173c:	4b8e      	ldr	r3, [pc, #568]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001744:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001748:	d00c      	beq.n	8001764 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174a:	4b8b      	ldr	r3, [pc, #556]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d112      	bne.n	800177c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b88      	ldr	r3, [pc, #544]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001762:	d10b      	bne.n	800177c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	4b84      	ldr	r3, [pc, #528]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d05b      	beq.n	8001828 <HAL_RCC_OscConfig+0x124>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d157      	bne.n	8001828 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e25a      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x90>
 8001786:	4b7c      	ldr	r3, [pc, #496]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7b      	ldr	r2, [pc, #492]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xcc>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0xb4>
 800179e:	4b76      	ldr	r3, [pc, #472]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a75      	ldr	r2, [pc, #468]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a72      	ldr	r2, [pc, #456]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xcc>
 80017b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6b      	ldr	r2, [pc, #428]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff f96e 	bl	8000ab8 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff f96a 	bl	8000ab8 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	@ 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e21f      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b61      	ldr	r3, [pc, #388]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xdc>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff f95a 	bl	8000ab8 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff f956 	bl	8000ab8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e20b      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b57      	ldr	r3, [pc, #348]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x104>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d06f      	beq.n	8001916 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001836:	4b50      	ldr	r3, [pc, #320]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d017      	beq.n	8001872 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001842:	4b4d      	ldr	r3, [pc, #308]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800184a:	2b08      	cmp	r3, #8
 800184c:	d105      	bne.n	800185a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800184e:	4b4a      	ldr	r3, [pc, #296]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185a:	4b47      	ldr	r3, [pc, #284]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d11c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b44      	ldr	r3, [pc, #272]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x186>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e1d3      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b3b      	ldr	r3, [pc, #236]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4937      	ldr	r1, [pc, #220]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	e03a      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	4b34      	ldr	r3, [pc, #208]	@ (800197c <HAL_RCC_OscConfig+0x278>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff f903 	bl	8000ab8 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff f8ff 	bl	8000ab8 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1b4      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4925      	ldr	r1, [pc, #148]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ea:	4b24      	ldr	r3, [pc, #144]	@ (800197c <HAL_RCC_OscConfig+0x278>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff f8e2 	bl	8000ab8 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff f8de 	bl	8000ab8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e193      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d036      	beq.n	8001990 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d016      	beq.n	8001958 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_RCC_OscConfig+0x27c>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff f8c2 	bl	8000ab8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff f8be 	bl	8000ab8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e173      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800194c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x234>
 8001956:	e01b      	b.n	8001990 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_RCC_OscConfig+0x27c>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff f8ab 	bl	8000ab8 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	e00e      	b.n	8001984 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff f8a7 	bl	8000ab8 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d907      	bls.n	8001984 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e15c      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
 8001978:	40023800 	.word	0x40023800
 800197c:	42470000 	.word	0x42470000
 8001980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	4b8a      	ldr	r3, [pc, #552]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ea      	bne.n	8001966 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8097 	beq.w	8001acc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a2:	4b83      	ldr	r3, [pc, #524]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	4b79      	ldr	r3, [pc, #484]	@ (8001bb4 <HAL_RCC_OscConfig+0x4b0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019da:	4b76      	ldr	r3, [pc, #472]	@ (8001bb4 <HAL_RCC_OscConfig+0x4b0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a75      	ldr	r2, [pc, #468]	@ (8001bb4 <HAL_RCC_OscConfig+0x4b0>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e6:	f7ff f867 	bl	8000ab8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7ff f863 	bl	8000ab8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e118      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb4 <HAL_RCC_OscConfig+0x4b0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x31e>
 8001a14:	4b66      	ldr	r3, [pc, #408]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a18:	4a65      	ldr	r2, [pc, #404]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a20:	e01c      	b.n	8001a5c <HAL_RCC_OscConfig+0x358>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x340>
 8001a2a:	4b61      	ldr	r3, [pc, #388]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2e:	4a60      	ldr	r2, [pc, #384]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a36:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3a:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0x358>
 8001a44:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a59      	ldr	r2, [pc, #356]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a50:	4b57      	ldr	r3, [pc, #348]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a54:	4a56      	ldr	r2, [pc, #344]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d015      	beq.n	8001a90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f828 	bl	8000ab8 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f824 	bl	8000ab8 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0d7      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ee      	beq.n	8001a6c <HAL_RCC_OscConfig+0x368>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f812 	bl	8000ab8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff f80e 	bl	8000ab8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0c1      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aae:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1ee      	bne.n	8001a98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80ad 	beq.w	8001c30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad6:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d060      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d145      	bne.n	8001b76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <HAL_RCC_OscConfig+0x4b4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7fe ffe2 	bl	8000ab8 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af8:	f7fe ffde 	bl	8000ab8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e093      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	019b      	lsls	r3, r3, #6
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	061b      	lsls	r3, r3, #24
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b40:	071b      	lsls	r3, r3, #28
 8001b42:	491b      	ldr	r1, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x4b4>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7fe ffb3 	bl	8000ab8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f7fe ffaf 	bl	8000ab8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e064      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x452>
 8001b74:	e05c      	b.n	8001c30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x4b4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7fe ff9c 	bl	8000ab8 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b84:	f7fe ff98 	bl	8000ab8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e04d      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x480>
 8001ba2:	e045      	b.n	8001c30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e040      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <HAL_RCC_OscConfig+0x538>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d030      	beq.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d129      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d122      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bec:	4013      	ands	r3, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d119      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	3b01      	subs	r3, #1
 8001c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10f      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800

08001c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e03f      	b.n	8001cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fe06 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	@ 0x24
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f929 	bl	8001edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b08a      	sub	sp, #40	@ 0x28
 8001cde:	af02      	add	r7, sp, #8
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	d17c      	bne.n	8001df4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_UART_Transmit+0x2c>
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e075      	b.n	8001df6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_UART_Transmit+0x3e>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e06e      	b.n	8001df6 <HAL_UART_Transmit+0x11c>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2221      	movs	r2, #33	@ 0x21
 8001d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d2e:	f7fe fec3 	bl	8000ab8 <HAL_GetTick>
 8001d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	88fa      	ldrh	r2, [r7, #6]
 8001d38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	88fa      	ldrh	r2, [r7, #6]
 8001d3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d48:	d108      	bne.n	8001d5c <HAL_UART_Transmit+0x82>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d104      	bne.n	8001d5c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	e003      	b.n	8001d64 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001d6c:	e02a      	b.n	8001dc4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2200      	movs	r2, #0
 8001d76:	2180      	movs	r1, #128	@ 0x80
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 f840 	bl	8001dfe <UART_WaitOnFlagUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e036      	b.n	8001df6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10b      	bne.n	8001da6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3302      	adds	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	e007      	b.n	8001db6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	781a      	ldrb	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	3301      	adds	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1cf      	bne.n	8001d6e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2140      	movs	r1, #64	@ 0x40
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f810 	bl	8001dfe <UART_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e006      	b.n	8001df6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2220      	movs	r2, #32
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b090      	sub	sp, #64	@ 0x40
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e0e:	e050      	b.n	8001eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e16:	d04c      	beq.n	8001eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8001e1e:	f7fe fe4b 	bl	8000ab8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d241      	bcs.n	8001eb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	330c      	adds	r3, #12
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e38:	e853 3f00 	ldrex	r3, [r3]
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	330c      	adds	r3, #12
 8001e4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e4e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e50:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e56:	e841 2300 	strex	r3, r2, [r1]
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1e5      	bne.n	8001e2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3314      	adds	r3, #20
 8001e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	e853 3f00 	ldrex	r3, [r3]
 8001e70:	613b      	str	r3, [r7, #16]
   return(result);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3314      	adds	r3, #20
 8001e80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e82:	623a      	str	r2, [r7, #32]
 8001e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e86:	69f9      	ldr	r1, [r7, #28]
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	e841 2300 	strex	r3, r2, [r1]
 8001e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1e5      	bne.n	8001e62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e00f      	b.n	8001ed2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d09f      	beq.n	8001e10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3740      	adds	r7, #64	@ 0x40
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee0:	b0c0      	sub	sp, #256	@ 0x100
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ef8:	68d9      	ldr	r1, [r3, #12]
 8001efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	ea40 0301 	orr.w	r3, r0, r1
 8001f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001f34:	f021 010c 	bic.w	r1, r1, #12
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f42:	430b      	orrs	r3, r1
 8001f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f56:	6999      	ldr	r1, [r3, #24]
 8001f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	ea40 0301 	orr.w	r3, r0, r1
 8001f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b8f      	ldr	r3, [pc, #572]	@ (80021a8 <UART_SetConfig+0x2cc>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d005      	beq.n	8001f7c <UART_SetConfig+0xa0>
 8001f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b8d      	ldr	r3, [pc, #564]	@ (80021ac <UART_SetConfig+0x2d0>)
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d104      	bne.n	8001f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f7c:	f7ff f97e 	bl	800127c <HAL_RCC_GetPCLK2Freq>
 8001f80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001f84:	e003      	b.n	8001f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f86:	f7ff f965 	bl	8001254 <HAL_RCC_GetPCLK1Freq>
 8001f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f98:	f040 810c 	bne.w	80021b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001fae:	4622      	mov	r2, r4
 8001fb0:	462b      	mov	r3, r5
 8001fb2:	1891      	adds	r1, r2, r2
 8001fb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001fb6:	415b      	adcs	r3, r3
 8001fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	eb12 0801 	adds.w	r8, r2, r1
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	eb43 0901 	adc.w	r9, r3, r1
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fde:	4690      	mov	r8, r2
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	eb18 0303 	adds.w	r3, r8, r3
 8001fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001fec:	462b      	mov	r3, r5
 8001fee:	eb49 0303 	adc.w	r3, r9, r3
 8001ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002002:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800200a:	460b      	mov	r3, r1
 800200c:	18db      	adds	r3, r3, r3
 800200e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002010:	4613      	mov	r3, r2
 8002012:	eb42 0303 	adc.w	r3, r2, r3
 8002016:	657b      	str	r3, [r7, #84]	@ 0x54
 8002018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800201c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002020:	f7fe f94e 	bl	80002c0 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4b61      	ldr	r3, [pc, #388]	@ (80021b0 <UART_SetConfig+0x2d4>)
 800202a:	fba3 2302 	umull	r2, r3, r3, r2
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	011c      	lsls	r4, r3, #4
 8002032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002036:	2200      	movs	r2, #0
 8002038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800203c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002044:	4642      	mov	r2, r8
 8002046:	464b      	mov	r3, r9
 8002048:	1891      	adds	r1, r2, r2
 800204a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800204c:	415b      	adcs	r3, r3
 800204e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002054:	4641      	mov	r1, r8
 8002056:	eb12 0a01 	adds.w	sl, r2, r1
 800205a:	4649      	mov	r1, r9
 800205c:	eb43 0b01 	adc.w	fp, r3, r1
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800206c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002074:	4692      	mov	sl, r2
 8002076:	469b      	mov	fp, r3
 8002078:	4643      	mov	r3, r8
 800207a:	eb1a 0303 	adds.w	r3, sl, r3
 800207e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002082:	464b      	mov	r3, r9
 8002084:	eb4b 0303 	adc.w	r3, fp, r3
 8002088:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002098:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800209c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80020a0:	460b      	mov	r3, r1
 80020a2:	18db      	adds	r3, r3, r3
 80020a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80020a6:	4613      	mov	r3, r2
 80020a8:	eb42 0303 	adc.w	r3, r2, r3
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80020b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80020b6:	f7fe f903 	bl	80002c0 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	4b3b      	ldr	r3, [pc, #236]	@ (80021b0 <UART_SetConfig+0x2d4>)
 80020c2:	fba3 2301 	umull	r2, r3, r3, r1
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2264      	movs	r2, #100	@ 0x64
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	1acb      	subs	r3, r1, r3
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80020d6:	4b36      	ldr	r3, [pc, #216]	@ (80021b0 <UART_SetConfig+0x2d4>)
 80020d8:	fba3 2302 	umull	r2, r3, r3, r2
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80020e4:	441c      	add	r4, r3
 80020e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	1891      	adds	r1, r2, r2
 80020fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002100:	415b      	adcs	r3, r3
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002108:	4641      	mov	r1, r8
 800210a:	1851      	adds	r1, r2, r1
 800210c:	6339      	str	r1, [r7, #48]	@ 0x30
 800210e:	4649      	mov	r1, r9
 8002110:	414b      	adcs	r3, r1
 8002112:	637b      	str	r3, [r7, #52]	@ 0x34
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002120:	4659      	mov	r1, fp
 8002122:	00cb      	lsls	r3, r1, #3
 8002124:	4651      	mov	r1, sl
 8002126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800212a:	4651      	mov	r1, sl
 800212c:	00ca      	lsls	r2, r1, #3
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	4603      	mov	r3, r0
 8002134:	4642      	mov	r2, r8
 8002136:	189b      	adds	r3, r3, r2
 8002138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800213c:	464b      	mov	r3, r9
 800213e:	460a      	mov	r2, r1
 8002140:	eb42 0303 	adc.w	r3, r2, r3
 8002144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002154:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800215c:	460b      	mov	r3, r1
 800215e:	18db      	adds	r3, r3, r3
 8002160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002162:	4613      	mov	r3, r2
 8002164:	eb42 0303 	adc.w	r3, r2, r3
 8002168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800216a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800216e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002172:	f7fe f8a5 	bl	80002c0 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <UART_SetConfig+0x2d4>)
 800217c:	fba3 1302 	umull	r1, r3, r3, r2
 8002180:	095b      	lsrs	r3, r3, #5
 8002182:	2164      	movs	r1, #100	@ 0x64
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	3332      	adds	r3, #50	@ 0x32
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <UART_SetConfig+0x2d4>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	095b      	lsrs	r3, r3, #5
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4422      	add	r2, r4
 80021a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80021a4:	e106      	b.n	80023b4 <UART_SetConfig+0x4d8>
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	40011400 	.word	0x40011400
 80021b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021b8:	2200      	movs	r2, #0
 80021ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80021be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80021c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80021c6:	4642      	mov	r2, r8
 80021c8:	464b      	mov	r3, r9
 80021ca:	1891      	adds	r1, r2, r2
 80021cc:	6239      	str	r1, [r7, #32]
 80021ce:	415b      	adcs	r3, r3
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021d6:	4641      	mov	r1, r8
 80021d8:	1854      	adds	r4, r2, r1
 80021da:	4649      	mov	r1, r9
 80021dc:	eb43 0501 	adc.w	r5, r3, r1
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	00eb      	lsls	r3, r5, #3
 80021ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ee:	00e2      	lsls	r2, r4, #3
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	4643      	mov	r3, r8
 80021f6:	18e3      	adds	r3, r4, r3
 80021f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021fc:	464b      	mov	r3, r9
 80021fe:	eb45 0303 	adc.w	r3, r5, r3
 8002202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002212:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002222:	4629      	mov	r1, r5
 8002224:	008b      	lsls	r3, r1, #2
 8002226:	4621      	mov	r1, r4
 8002228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800222c:	4621      	mov	r1, r4
 800222e:	008a      	lsls	r2, r1, #2
 8002230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002234:	f7fe f844 	bl	80002c0 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4b60      	ldr	r3, [pc, #384]	@ (80023c0 <UART_SetConfig+0x4e4>)
 800223e:	fba3 2302 	umull	r2, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	011c      	lsls	r4, r3, #4
 8002246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002250:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002258:	4642      	mov	r2, r8
 800225a:	464b      	mov	r3, r9
 800225c:	1891      	adds	r1, r2, r2
 800225e:	61b9      	str	r1, [r7, #24]
 8002260:	415b      	adcs	r3, r3
 8002262:	61fb      	str	r3, [r7, #28]
 8002264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002268:	4641      	mov	r1, r8
 800226a:	1851      	adds	r1, r2, r1
 800226c:	6139      	str	r1, [r7, #16]
 800226e:	4649      	mov	r1, r9
 8002270:	414b      	adcs	r3, r1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002280:	4659      	mov	r1, fp
 8002282:	00cb      	lsls	r3, r1, #3
 8002284:	4651      	mov	r1, sl
 8002286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800228a:	4651      	mov	r1, sl
 800228c:	00ca      	lsls	r2, r1, #3
 800228e:	4610      	mov	r0, r2
 8002290:	4619      	mov	r1, r3
 8002292:	4603      	mov	r3, r0
 8002294:	4642      	mov	r2, r8
 8002296:	189b      	adds	r3, r3, r2
 8002298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800229c:	464b      	mov	r3, r9
 800229e:	460a      	mov	r2, r1
 80022a0:	eb42 0303 	adc.w	r3, r2, r3
 80022a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80022c0:	4649      	mov	r1, r9
 80022c2:	008b      	lsls	r3, r1, #2
 80022c4:	4641      	mov	r1, r8
 80022c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ca:	4641      	mov	r1, r8
 80022cc:	008a      	lsls	r2, r1, #2
 80022ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80022d2:	f7fd fff5 	bl	80002c0 <__aeabi_uldivmod>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4611      	mov	r1, r2
 80022dc:	4b38      	ldr	r3, [pc, #224]	@ (80023c0 <UART_SetConfig+0x4e4>)
 80022de:	fba3 2301 	umull	r2, r3, r3, r1
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2264      	movs	r2, #100	@ 0x64
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	1acb      	subs	r3, r1, r3
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	3332      	adds	r3, #50	@ 0x32
 80022f0:	4a33      	ldr	r2, [pc, #204]	@ (80023c0 <UART_SetConfig+0x4e4>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022fc:	441c      	add	r4, r3
 80022fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002302:	2200      	movs	r2, #0
 8002304:	673b      	str	r3, [r7, #112]	@ 0x70
 8002306:	677a      	str	r2, [r7, #116]	@ 0x74
 8002308:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	1891      	adds	r1, r2, r2
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	415b      	adcs	r3, r3
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800231c:	4641      	mov	r1, r8
 800231e:	1851      	adds	r1, r2, r1
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	4649      	mov	r1, r9
 8002324:	414b      	adcs	r3, r1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002334:	4659      	mov	r1, fp
 8002336:	00cb      	lsls	r3, r1, #3
 8002338:	4651      	mov	r1, sl
 800233a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800233e:	4651      	mov	r1, sl
 8002340:	00ca      	lsls	r2, r1, #3
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	4603      	mov	r3, r0
 8002348:	4642      	mov	r2, r8
 800234a:	189b      	adds	r3, r3, r2
 800234c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800234e:	464b      	mov	r3, r9
 8002350:	460a      	mov	r2, r1
 8002352:	eb42 0303 	adc.w	r3, r2, r3
 8002356:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	663b      	str	r3, [r7, #96]	@ 0x60
 8002362:	667a      	str	r2, [r7, #100]	@ 0x64
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002370:	4649      	mov	r1, r9
 8002372:	008b      	lsls	r3, r1, #2
 8002374:	4641      	mov	r1, r8
 8002376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800237a:	4641      	mov	r1, r8
 800237c:	008a      	lsls	r2, r1, #2
 800237e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002382:	f7fd ff9d 	bl	80002c0 <__aeabi_uldivmod>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <UART_SetConfig+0x4e4>)
 800238c:	fba3 1302 	umull	r1, r3, r3, r2
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	2164      	movs	r1, #100	@ 0x64
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	3332      	adds	r3, #50	@ 0x32
 800239e:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <UART_SetConfig+0x4e4>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	095b      	lsrs	r3, r3, #5
 80023a6:	f003 020f 	and.w	r2, r3, #15
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4422      	add	r2, r4
 80023b2:	609a      	str	r2, [r3, #8]
}
 80023b4:	bf00      	nop
 80023b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80023ba:	46bd      	mov	sp, r7
 80023bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c0:	51eb851f 	.word	0x51eb851f

080023c4 <siprintf>:
 80023c4:	b40e      	push	{r1, r2, r3}
 80023c6:	b500      	push	{lr}
 80023c8:	b09c      	sub	sp, #112	@ 0x70
 80023ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80023cc:	9002      	str	r0, [sp, #8]
 80023ce:	9006      	str	r0, [sp, #24]
 80023d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80023d4:	4809      	ldr	r0, [pc, #36]	@ (80023fc <siprintf+0x38>)
 80023d6:	9107      	str	r1, [sp, #28]
 80023d8:	9104      	str	r1, [sp, #16]
 80023da:	4909      	ldr	r1, [pc, #36]	@ (8002400 <siprintf+0x3c>)
 80023dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80023e0:	9105      	str	r1, [sp, #20]
 80023e2:	6800      	ldr	r0, [r0, #0]
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	a902      	add	r1, sp, #8
 80023e8:	f000 f994 	bl	8002714 <_svfiprintf_r>
 80023ec:	9b02      	ldr	r3, [sp, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	b01c      	add	sp, #112	@ 0x70
 80023f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80023f8:	b003      	add	sp, #12
 80023fa:	4770      	bx	lr
 80023fc:	2000000c 	.word	0x2000000c
 8002400:	ffff0208 	.word	0xffff0208

08002404 <memset>:
 8002404:	4402      	add	r2, r0
 8002406:	4603      	mov	r3, r0
 8002408:	4293      	cmp	r3, r2
 800240a:	d100      	bne.n	800240e <memset+0xa>
 800240c:	4770      	bx	lr
 800240e:	f803 1b01 	strb.w	r1, [r3], #1
 8002412:	e7f9      	b.n	8002408 <memset+0x4>

08002414 <__errno>:
 8002414:	4b01      	ldr	r3, [pc, #4]	@ (800241c <__errno+0x8>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	2000000c 	.word	0x2000000c

08002420 <__libc_init_array>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	4d0d      	ldr	r5, [pc, #52]	@ (8002458 <__libc_init_array+0x38>)
 8002424:	4c0d      	ldr	r4, [pc, #52]	@ (800245c <__libc_init_array+0x3c>)
 8002426:	1b64      	subs	r4, r4, r5
 8002428:	10a4      	asrs	r4, r4, #2
 800242a:	2600      	movs	r6, #0
 800242c:	42a6      	cmp	r6, r4
 800242e:	d109      	bne.n	8002444 <__libc_init_array+0x24>
 8002430:	4d0b      	ldr	r5, [pc, #44]	@ (8002460 <__libc_init_array+0x40>)
 8002432:	4c0c      	ldr	r4, [pc, #48]	@ (8002464 <__libc_init_array+0x44>)
 8002434:	f000 fc66 	bl	8002d04 <_init>
 8002438:	1b64      	subs	r4, r4, r5
 800243a:	10a4      	asrs	r4, r4, #2
 800243c:	2600      	movs	r6, #0
 800243e:	42a6      	cmp	r6, r4
 8002440:	d105      	bne.n	800244e <__libc_init_array+0x2e>
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	f855 3b04 	ldr.w	r3, [r5], #4
 8002448:	4798      	blx	r3
 800244a:	3601      	adds	r6, #1
 800244c:	e7ee      	b.n	800242c <__libc_init_array+0xc>
 800244e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002452:	4798      	blx	r3
 8002454:	3601      	adds	r6, #1
 8002456:	e7f2      	b.n	800243e <__libc_init_array+0x1e>
 8002458:	08002dc0 	.word	0x08002dc0
 800245c:	08002dc0 	.word	0x08002dc0
 8002460:	08002dc0 	.word	0x08002dc0
 8002464:	08002dc4 	.word	0x08002dc4

08002468 <__retarget_lock_acquire_recursive>:
 8002468:	4770      	bx	lr

0800246a <__retarget_lock_release_recursive>:
 800246a:	4770      	bx	lr

0800246c <_free_r>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	4605      	mov	r5, r0
 8002470:	2900      	cmp	r1, #0
 8002472:	d041      	beq.n	80024f8 <_free_r+0x8c>
 8002474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002478:	1f0c      	subs	r4, r1, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	bfb8      	it	lt
 800247e:	18e4      	addlt	r4, r4, r3
 8002480:	f000 f8e0 	bl	8002644 <__malloc_lock>
 8002484:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <_free_r+0x90>)
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	b933      	cbnz	r3, 8002498 <_free_r+0x2c>
 800248a:	6063      	str	r3, [r4, #4]
 800248c:	6014      	str	r4, [r2, #0]
 800248e:	4628      	mov	r0, r5
 8002490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002494:	f000 b8dc 	b.w	8002650 <__malloc_unlock>
 8002498:	42a3      	cmp	r3, r4
 800249a:	d908      	bls.n	80024ae <_free_r+0x42>
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	1821      	adds	r1, r4, r0
 80024a0:	428b      	cmp	r3, r1
 80024a2:	bf01      	itttt	eq
 80024a4:	6819      	ldreq	r1, [r3, #0]
 80024a6:	685b      	ldreq	r3, [r3, #4]
 80024a8:	1809      	addeq	r1, r1, r0
 80024aa:	6021      	streq	r1, [r4, #0]
 80024ac:	e7ed      	b.n	800248a <_free_r+0x1e>
 80024ae:	461a      	mov	r2, r3
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	b10b      	cbz	r3, 80024b8 <_free_r+0x4c>
 80024b4:	42a3      	cmp	r3, r4
 80024b6:	d9fa      	bls.n	80024ae <_free_r+0x42>
 80024b8:	6811      	ldr	r1, [r2, #0]
 80024ba:	1850      	adds	r0, r2, r1
 80024bc:	42a0      	cmp	r0, r4
 80024be:	d10b      	bne.n	80024d8 <_free_r+0x6c>
 80024c0:	6820      	ldr	r0, [r4, #0]
 80024c2:	4401      	add	r1, r0
 80024c4:	1850      	adds	r0, r2, r1
 80024c6:	4283      	cmp	r3, r0
 80024c8:	6011      	str	r1, [r2, #0]
 80024ca:	d1e0      	bne.n	800248e <_free_r+0x22>
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	6053      	str	r3, [r2, #4]
 80024d2:	4408      	add	r0, r1
 80024d4:	6010      	str	r0, [r2, #0]
 80024d6:	e7da      	b.n	800248e <_free_r+0x22>
 80024d8:	d902      	bls.n	80024e0 <_free_r+0x74>
 80024da:	230c      	movs	r3, #12
 80024dc:	602b      	str	r3, [r5, #0]
 80024de:	e7d6      	b.n	800248e <_free_r+0x22>
 80024e0:	6820      	ldr	r0, [r4, #0]
 80024e2:	1821      	adds	r1, r4, r0
 80024e4:	428b      	cmp	r3, r1
 80024e6:	bf04      	itt	eq
 80024e8:	6819      	ldreq	r1, [r3, #0]
 80024ea:	685b      	ldreq	r3, [r3, #4]
 80024ec:	6063      	str	r3, [r4, #4]
 80024ee:	bf04      	itt	eq
 80024f0:	1809      	addeq	r1, r1, r0
 80024f2:	6021      	streq	r1, [r4, #0]
 80024f4:	6054      	str	r4, [r2, #4]
 80024f6:	e7ca      	b.n	800248e <_free_r+0x22>
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	20000270 	.word	0x20000270

08002500 <sbrk_aligned>:
 8002500:	b570      	push	{r4, r5, r6, lr}
 8002502:	4e0f      	ldr	r6, [pc, #60]	@ (8002540 <sbrk_aligned+0x40>)
 8002504:	460c      	mov	r4, r1
 8002506:	6831      	ldr	r1, [r6, #0]
 8002508:	4605      	mov	r5, r0
 800250a:	b911      	cbnz	r1, 8002512 <sbrk_aligned+0x12>
 800250c:	f000 fba6 	bl	8002c5c <_sbrk_r>
 8002510:	6030      	str	r0, [r6, #0]
 8002512:	4621      	mov	r1, r4
 8002514:	4628      	mov	r0, r5
 8002516:	f000 fba1 	bl	8002c5c <_sbrk_r>
 800251a:	1c43      	adds	r3, r0, #1
 800251c:	d103      	bne.n	8002526 <sbrk_aligned+0x26>
 800251e:	f04f 34ff 	mov.w	r4, #4294967295
 8002522:	4620      	mov	r0, r4
 8002524:	bd70      	pop	{r4, r5, r6, pc}
 8002526:	1cc4      	adds	r4, r0, #3
 8002528:	f024 0403 	bic.w	r4, r4, #3
 800252c:	42a0      	cmp	r0, r4
 800252e:	d0f8      	beq.n	8002522 <sbrk_aligned+0x22>
 8002530:	1a21      	subs	r1, r4, r0
 8002532:	4628      	mov	r0, r5
 8002534:	f000 fb92 	bl	8002c5c <_sbrk_r>
 8002538:	3001      	adds	r0, #1
 800253a:	d1f2      	bne.n	8002522 <sbrk_aligned+0x22>
 800253c:	e7ef      	b.n	800251e <sbrk_aligned+0x1e>
 800253e:	bf00      	nop
 8002540:	2000026c 	.word	0x2000026c

08002544 <_malloc_r>:
 8002544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002548:	1ccd      	adds	r5, r1, #3
 800254a:	f025 0503 	bic.w	r5, r5, #3
 800254e:	3508      	adds	r5, #8
 8002550:	2d0c      	cmp	r5, #12
 8002552:	bf38      	it	cc
 8002554:	250c      	movcc	r5, #12
 8002556:	2d00      	cmp	r5, #0
 8002558:	4606      	mov	r6, r0
 800255a:	db01      	blt.n	8002560 <_malloc_r+0x1c>
 800255c:	42a9      	cmp	r1, r5
 800255e:	d904      	bls.n	800256a <_malloc_r+0x26>
 8002560:	230c      	movs	r3, #12
 8002562:	6033      	str	r3, [r6, #0]
 8002564:	2000      	movs	r0, #0
 8002566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800256a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002640 <_malloc_r+0xfc>
 800256e:	f000 f869 	bl	8002644 <__malloc_lock>
 8002572:	f8d8 3000 	ldr.w	r3, [r8]
 8002576:	461c      	mov	r4, r3
 8002578:	bb44      	cbnz	r4, 80025cc <_malloc_r+0x88>
 800257a:	4629      	mov	r1, r5
 800257c:	4630      	mov	r0, r6
 800257e:	f7ff ffbf 	bl	8002500 <sbrk_aligned>
 8002582:	1c43      	adds	r3, r0, #1
 8002584:	4604      	mov	r4, r0
 8002586:	d158      	bne.n	800263a <_malloc_r+0xf6>
 8002588:	f8d8 4000 	ldr.w	r4, [r8]
 800258c:	4627      	mov	r7, r4
 800258e:	2f00      	cmp	r7, #0
 8002590:	d143      	bne.n	800261a <_malloc_r+0xd6>
 8002592:	2c00      	cmp	r4, #0
 8002594:	d04b      	beq.n	800262e <_malloc_r+0xea>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	4639      	mov	r1, r7
 800259a:	4630      	mov	r0, r6
 800259c:	eb04 0903 	add.w	r9, r4, r3
 80025a0:	f000 fb5c 	bl	8002c5c <_sbrk_r>
 80025a4:	4581      	cmp	r9, r0
 80025a6:	d142      	bne.n	800262e <_malloc_r+0xea>
 80025a8:	6821      	ldr	r1, [r4, #0]
 80025aa:	1a6d      	subs	r5, r5, r1
 80025ac:	4629      	mov	r1, r5
 80025ae:	4630      	mov	r0, r6
 80025b0:	f7ff ffa6 	bl	8002500 <sbrk_aligned>
 80025b4:	3001      	adds	r0, #1
 80025b6:	d03a      	beq.n	800262e <_malloc_r+0xea>
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	442b      	add	r3, r5
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	f8d8 3000 	ldr.w	r3, [r8]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	bb62      	cbnz	r2, 8002620 <_malloc_r+0xdc>
 80025c6:	f8c8 7000 	str.w	r7, [r8]
 80025ca:	e00f      	b.n	80025ec <_malloc_r+0xa8>
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	1b52      	subs	r2, r2, r5
 80025d0:	d420      	bmi.n	8002614 <_malloc_r+0xd0>
 80025d2:	2a0b      	cmp	r2, #11
 80025d4:	d917      	bls.n	8002606 <_malloc_r+0xc2>
 80025d6:	1961      	adds	r1, r4, r5
 80025d8:	42a3      	cmp	r3, r4
 80025da:	6025      	str	r5, [r4, #0]
 80025dc:	bf18      	it	ne
 80025de:	6059      	strne	r1, [r3, #4]
 80025e0:	6863      	ldr	r3, [r4, #4]
 80025e2:	bf08      	it	eq
 80025e4:	f8c8 1000 	streq.w	r1, [r8]
 80025e8:	5162      	str	r2, [r4, r5]
 80025ea:	604b      	str	r3, [r1, #4]
 80025ec:	4630      	mov	r0, r6
 80025ee:	f000 f82f 	bl	8002650 <__malloc_unlock>
 80025f2:	f104 000b 	add.w	r0, r4, #11
 80025f6:	1d23      	adds	r3, r4, #4
 80025f8:	f020 0007 	bic.w	r0, r0, #7
 80025fc:	1ac2      	subs	r2, r0, r3
 80025fe:	bf1c      	itt	ne
 8002600:	1a1b      	subne	r3, r3, r0
 8002602:	50a3      	strne	r3, [r4, r2]
 8002604:	e7af      	b.n	8002566 <_malloc_r+0x22>
 8002606:	6862      	ldr	r2, [r4, #4]
 8002608:	42a3      	cmp	r3, r4
 800260a:	bf0c      	ite	eq
 800260c:	f8c8 2000 	streq.w	r2, [r8]
 8002610:	605a      	strne	r2, [r3, #4]
 8002612:	e7eb      	b.n	80025ec <_malloc_r+0xa8>
 8002614:	4623      	mov	r3, r4
 8002616:	6864      	ldr	r4, [r4, #4]
 8002618:	e7ae      	b.n	8002578 <_malloc_r+0x34>
 800261a:	463c      	mov	r4, r7
 800261c:	687f      	ldr	r7, [r7, #4]
 800261e:	e7b6      	b.n	800258e <_malloc_r+0x4a>
 8002620:	461a      	mov	r2, r3
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	42a3      	cmp	r3, r4
 8002626:	d1fb      	bne.n	8002620 <_malloc_r+0xdc>
 8002628:	2300      	movs	r3, #0
 800262a:	6053      	str	r3, [r2, #4]
 800262c:	e7de      	b.n	80025ec <_malloc_r+0xa8>
 800262e:	230c      	movs	r3, #12
 8002630:	6033      	str	r3, [r6, #0]
 8002632:	4630      	mov	r0, r6
 8002634:	f000 f80c 	bl	8002650 <__malloc_unlock>
 8002638:	e794      	b.n	8002564 <_malloc_r+0x20>
 800263a:	6005      	str	r5, [r0, #0]
 800263c:	e7d6      	b.n	80025ec <_malloc_r+0xa8>
 800263e:	bf00      	nop
 8002640:	20000270 	.word	0x20000270

08002644 <__malloc_lock>:
 8002644:	4801      	ldr	r0, [pc, #4]	@ (800264c <__malloc_lock+0x8>)
 8002646:	f7ff bf0f 	b.w	8002468 <__retarget_lock_acquire_recursive>
 800264a:	bf00      	nop
 800264c:	20000268 	.word	0x20000268

08002650 <__malloc_unlock>:
 8002650:	4801      	ldr	r0, [pc, #4]	@ (8002658 <__malloc_unlock+0x8>)
 8002652:	f7ff bf0a 	b.w	800246a <__retarget_lock_release_recursive>
 8002656:	bf00      	nop
 8002658:	20000268 	.word	0x20000268

0800265c <__ssputs_r>:
 800265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002660:	688e      	ldr	r6, [r1, #8]
 8002662:	461f      	mov	r7, r3
 8002664:	42be      	cmp	r6, r7
 8002666:	680b      	ldr	r3, [r1, #0]
 8002668:	4682      	mov	sl, r0
 800266a:	460c      	mov	r4, r1
 800266c:	4690      	mov	r8, r2
 800266e:	d82d      	bhi.n	80026cc <__ssputs_r+0x70>
 8002670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002678:	d026      	beq.n	80026c8 <__ssputs_r+0x6c>
 800267a:	6965      	ldr	r5, [r4, #20]
 800267c:	6909      	ldr	r1, [r1, #16]
 800267e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002682:	eba3 0901 	sub.w	r9, r3, r1
 8002686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800268a:	1c7b      	adds	r3, r7, #1
 800268c:	444b      	add	r3, r9
 800268e:	106d      	asrs	r5, r5, #1
 8002690:	429d      	cmp	r5, r3
 8002692:	bf38      	it	cc
 8002694:	461d      	movcc	r5, r3
 8002696:	0553      	lsls	r3, r2, #21
 8002698:	d527      	bpl.n	80026ea <__ssputs_r+0x8e>
 800269a:	4629      	mov	r1, r5
 800269c:	f7ff ff52 	bl	8002544 <_malloc_r>
 80026a0:	4606      	mov	r6, r0
 80026a2:	b360      	cbz	r0, 80026fe <__ssputs_r+0xa2>
 80026a4:	6921      	ldr	r1, [r4, #16]
 80026a6:	464a      	mov	r2, r9
 80026a8:	f000 fae8 	bl	8002c7c <memcpy>
 80026ac:	89a3      	ldrh	r3, [r4, #12]
 80026ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80026b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b6:	81a3      	strh	r3, [r4, #12]
 80026b8:	6126      	str	r6, [r4, #16]
 80026ba:	6165      	str	r5, [r4, #20]
 80026bc:	444e      	add	r6, r9
 80026be:	eba5 0509 	sub.w	r5, r5, r9
 80026c2:	6026      	str	r6, [r4, #0]
 80026c4:	60a5      	str	r5, [r4, #8]
 80026c6:	463e      	mov	r6, r7
 80026c8:	42be      	cmp	r6, r7
 80026ca:	d900      	bls.n	80026ce <__ssputs_r+0x72>
 80026cc:	463e      	mov	r6, r7
 80026ce:	6820      	ldr	r0, [r4, #0]
 80026d0:	4632      	mov	r2, r6
 80026d2:	4641      	mov	r1, r8
 80026d4:	f000 faa8 	bl	8002c28 <memmove>
 80026d8:	68a3      	ldr	r3, [r4, #8]
 80026da:	1b9b      	subs	r3, r3, r6
 80026dc:	60a3      	str	r3, [r4, #8]
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	4433      	add	r3, r6
 80026e2:	6023      	str	r3, [r4, #0]
 80026e4:	2000      	movs	r0, #0
 80026e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ea:	462a      	mov	r2, r5
 80026ec:	f000 fad4 	bl	8002c98 <_realloc_r>
 80026f0:	4606      	mov	r6, r0
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d1e0      	bne.n	80026b8 <__ssputs_r+0x5c>
 80026f6:	6921      	ldr	r1, [r4, #16]
 80026f8:	4650      	mov	r0, sl
 80026fa:	f7ff feb7 	bl	800246c <_free_r>
 80026fe:	230c      	movs	r3, #12
 8002700:	f8ca 3000 	str.w	r3, [sl]
 8002704:	89a3      	ldrh	r3, [r4, #12]
 8002706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800270a:	81a3      	strh	r3, [r4, #12]
 800270c:	f04f 30ff 	mov.w	r0, #4294967295
 8002710:	e7e9      	b.n	80026e6 <__ssputs_r+0x8a>
	...

08002714 <_svfiprintf_r>:
 8002714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002718:	4698      	mov	r8, r3
 800271a:	898b      	ldrh	r3, [r1, #12]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	b09d      	sub	sp, #116	@ 0x74
 8002720:	4607      	mov	r7, r0
 8002722:	460d      	mov	r5, r1
 8002724:	4614      	mov	r4, r2
 8002726:	d510      	bpl.n	800274a <_svfiprintf_r+0x36>
 8002728:	690b      	ldr	r3, [r1, #16]
 800272a:	b973      	cbnz	r3, 800274a <_svfiprintf_r+0x36>
 800272c:	2140      	movs	r1, #64	@ 0x40
 800272e:	f7ff ff09 	bl	8002544 <_malloc_r>
 8002732:	6028      	str	r0, [r5, #0]
 8002734:	6128      	str	r0, [r5, #16]
 8002736:	b930      	cbnz	r0, 8002746 <_svfiprintf_r+0x32>
 8002738:	230c      	movs	r3, #12
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	b01d      	add	sp, #116	@ 0x74
 8002742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002746:	2340      	movs	r3, #64	@ 0x40
 8002748:	616b      	str	r3, [r5, #20]
 800274a:	2300      	movs	r3, #0
 800274c:	9309      	str	r3, [sp, #36]	@ 0x24
 800274e:	2320      	movs	r3, #32
 8002750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002754:	f8cd 800c 	str.w	r8, [sp, #12]
 8002758:	2330      	movs	r3, #48	@ 0x30
 800275a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80028f8 <_svfiprintf_r+0x1e4>
 800275e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002762:	f04f 0901 	mov.w	r9, #1
 8002766:	4623      	mov	r3, r4
 8002768:	469a      	mov	sl, r3
 800276a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800276e:	b10a      	cbz	r2, 8002774 <_svfiprintf_r+0x60>
 8002770:	2a25      	cmp	r2, #37	@ 0x25
 8002772:	d1f9      	bne.n	8002768 <_svfiprintf_r+0x54>
 8002774:	ebba 0b04 	subs.w	fp, sl, r4
 8002778:	d00b      	beq.n	8002792 <_svfiprintf_r+0x7e>
 800277a:	465b      	mov	r3, fp
 800277c:	4622      	mov	r2, r4
 800277e:	4629      	mov	r1, r5
 8002780:	4638      	mov	r0, r7
 8002782:	f7ff ff6b 	bl	800265c <__ssputs_r>
 8002786:	3001      	adds	r0, #1
 8002788:	f000 80a7 	beq.w	80028da <_svfiprintf_r+0x1c6>
 800278c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800278e:	445a      	add	r2, fp
 8002790:	9209      	str	r2, [sp, #36]	@ 0x24
 8002792:	f89a 3000 	ldrb.w	r3, [sl]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 809f 	beq.w	80028da <_svfiprintf_r+0x1c6>
 800279c:	2300      	movs	r3, #0
 800279e:	f04f 32ff 	mov.w	r2, #4294967295
 80027a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027a6:	f10a 0a01 	add.w	sl, sl, #1
 80027aa:	9304      	str	r3, [sp, #16]
 80027ac:	9307      	str	r3, [sp, #28]
 80027ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80027b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80027b4:	4654      	mov	r4, sl
 80027b6:	2205      	movs	r2, #5
 80027b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027bc:	484e      	ldr	r0, [pc, #312]	@ (80028f8 <_svfiprintf_r+0x1e4>)
 80027be:	f7fd fd2f 	bl	8000220 <memchr>
 80027c2:	9a04      	ldr	r2, [sp, #16]
 80027c4:	b9d8      	cbnz	r0, 80027fe <_svfiprintf_r+0xea>
 80027c6:	06d0      	lsls	r0, r2, #27
 80027c8:	bf44      	itt	mi
 80027ca:	2320      	movmi	r3, #32
 80027cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027d0:	0711      	lsls	r1, r2, #28
 80027d2:	bf44      	itt	mi
 80027d4:	232b      	movmi	r3, #43	@ 0x2b
 80027d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027da:	f89a 3000 	ldrb.w	r3, [sl]
 80027de:	2b2a      	cmp	r3, #42	@ 0x2a
 80027e0:	d015      	beq.n	800280e <_svfiprintf_r+0xfa>
 80027e2:	9a07      	ldr	r2, [sp, #28]
 80027e4:	4654      	mov	r4, sl
 80027e6:	2000      	movs	r0, #0
 80027e8:	f04f 0c0a 	mov.w	ip, #10
 80027ec:	4621      	mov	r1, r4
 80027ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027f2:	3b30      	subs	r3, #48	@ 0x30
 80027f4:	2b09      	cmp	r3, #9
 80027f6:	d94b      	bls.n	8002890 <_svfiprintf_r+0x17c>
 80027f8:	b1b0      	cbz	r0, 8002828 <_svfiprintf_r+0x114>
 80027fa:	9207      	str	r2, [sp, #28]
 80027fc:	e014      	b.n	8002828 <_svfiprintf_r+0x114>
 80027fe:	eba0 0308 	sub.w	r3, r0, r8
 8002802:	fa09 f303 	lsl.w	r3, r9, r3
 8002806:	4313      	orrs	r3, r2
 8002808:	9304      	str	r3, [sp, #16]
 800280a:	46a2      	mov	sl, r4
 800280c:	e7d2      	b.n	80027b4 <_svfiprintf_r+0xa0>
 800280e:	9b03      	ldr	r3, [sp, #12]
 8002810:	1d19      	adds	r1, r3, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	9103      	str	r1, [sp, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	bfbb      	ittet	lt
 800281a:	425b      	neglt	r3, r3
 800281c:	f042 0202 	orrlt.w	r2, r2, #2
 8002820:	9307      	strge	r3, [sp, #28]
 8002822:	9307      	strlt	r3, [sp, #28]
 8002824:	bfb8      	it	lt
 8002826:	9204      	strlt	r2, [sp, #16]
 8002828:	7823      	ldrb	r3, [r4, #0]
 800282a:	2b2e      	cmp	r3, #46	@ 0x2e
 800282c:	d10a      	bne.n	8002844 <_svfiprintf_r+0x130>
 800282e:	7863      	ldrb	r3, [r4, #1]
 8002830:	2b2a      	cmp	r3, #42	@ 0x2a
 8002832:	d132      	bne.n	800289a <_svfiprintf_r+0x186>
 8002834:	9b03      	ldr	r3, [sp, #12]
 8002836:	1d1a      	adds	r2, r3, #4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	9203      	str	r2, [sp, #12]
 800283c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002840:	3402      	adds	r4, #2
 8002842:	9305      	str	r3, [sp, #20]
 8002844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002908 <_svfiprintf_r+0x1f4>
 8002848:	7821      	ldrb	r1, [r4, #0]
 800284a:	2203      	movs	r2, #3
 800284c:	4650      	mov	r0, sl
 800284e:	f7fd fce7 	bl	8000220 <memchr>
 8002852:	b138      	cbz	r0, 8002864 <_svfiprintf_r+0x150>
 8002854:	9b04      	ldr	r3, [sp, #16]
 8002856:	eba0 000a 	sub.w	r0, r0, sl
 800285a:	2240      	movs	r2, #64	@ 0x40
 800285c:	4082      	lsls	r2, r0
 800285e:	4313      	orrs	r3, r2
 8002860:	3401      	adds	r4, #1
 8002862:	9304      	str	r3, [sp, #16]
 8002864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002868:	4824      	ldr	r0, [pc, #144]	@ (80028fc <_svfiprintf_r+0x1e8>)
 800286a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800286e:	2206      	movs	r2, #6
 8002870:	f7fd fcd6 	bl	8000220 <memchr>
 8002874:	2800      	cmp	r0, #0
 8002876:	d036      	beq.n	80028e6 <_svfiprintf_r+0x1d2>
 8002878:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <_svfiprintf_r+0x1ec>)
 800287a:	bb1b      	cbnz	r3, 80028c4 <_svfiprintf_r+0x1b0>
 800287c:	9b03      	ldr	r3, [sp, #12]
 800287e:	3307      	adds	r3, #7
 8002880:	f023 0307 	bic.w	r3, r3, #7
 8002884:	3308      	adds	r3, #8
 8002886:	9303      	str	r3, [sp, #12]
 8002888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800288a:	4433      	add	r3, r6
 800288c:	9309      	str	r3, [sp, #36]	@ 0x24
 800288e:	e76a      	b.n	8002766 <_svfiprintf_r+0x52>
 8002890:	fb0c 3202 	mla	r2, ip, r2, r3
 8002894:	460c      	mov	r4, r1
 8002896:	2001      	movs	r0, #1
 8002898:	e7a8      	b.n	80027ec <_svfiprintf_r+0xd8>
 800289a:	2300      	movs	r3, #0
 800289c:	3401      	adds	r4, #1
 800289e:	9305      	str	r3, [sp, #20]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f04f 0c0a 	mov.w	ip, #10
 80028a6:	4620      	mov	r0, r4
 80028a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028ac:	3a30      	subs	r2, #48	@ 0x30
 80028ae:	2a09      	cmp	r2, #9
 80028b0:	d903      	bls.n	80028ba <_svfiprintf_r+0x1a6>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0c6      	beq.n	8002844 <_svfiprintf_r+0x130>
 80028b6:	9105      	str	r1, [sp, #20]
 80028b8:	e7c4      	b.n	8002844 <_svfiprintf_r+0x130>
 80028ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80028be:	4604      	mov	r4, r0
 80028c0:	2301      	movs	r3, #1
 80028c2:	e7f0      	b.n	80028a6 <_svfiprintf_r+0x192>
 80028c4:	ab03      	add	r3, sp, #12
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	462a      	mov	r2, r5
 80028ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <_svfiprintf_r+0x1f0>)
 80028cc:	a904      	add	r1, sp, #16
 80028ce:	4638      	mov	r0, r7
 80028d0:	f3af 8000 	nop.w
 80028d4:	1c42      	adds	r2, r0, #1
 80028d6:	4606      	mov	r6, r0
 80028d8:	d1d6      	bne.n	8002888 <_svfiprintf_r+0x174>
 80028da:	89ab      	ldrh	r3, [r5, #12]
 80028dc:	065b      	lsls	r3, r3, #25
 80028de:	f53f af2d 	bmi.w	800273c <_svfiprintf_r+0x28>
 80028e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028e4:	e72c      	b.n	8002740 <_svfiprintf_r+0x2c>
 80028e6:	ab03      	add	r3, sp, #12
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	462a      	mov	r2, r5
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <_svfiprintf_r+0x1f0>)
 80028ee:	a904      	add	r1, sp, #16
 80028f0:	4638      	mov	r0, r7
 80028f2:	f000 f879 	bl	80029e8 <_printf_i>
 80028f6:	e7ed      	b.n	80028d4 <_svfiprintf_r+0x1c0>
 80028f8:	08002d84 	.word	0x08002d84
 80028fc:	08002d8e 	.word	0x08002d8e
 8002900:	00000000 	.word	0x00000000
 8002904:	0800265d 	.word	0x0800265d
 8002908:	08002d8a 	.word	0x08002d8a

0800290c <_printf_common>:
 800290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002910:	4616      	mov	r6, r2
 8002912:	4698      	mov	r8, r3
 8002914:	688a      	ldr	r2, [r1, #8]
 8002916:	690b      	ldr	r3, [r1, #16]
 8002918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800291c:	4293      	cmp	r3, r2
 800291e:	bfb8      	it	lt
 8002920:	4613      	movlt	r3, r2
 8002922:	6033      	str	r3, [r6, #0]
 8002924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002928:	4607      	mov	r7, r0
 800292a:	460c      	mov	r4, r1
 800292c:	b10a      	cbz	r2, 8002932 <_printf_common+0x26>
 800292e:	3301      	adds	r3, #1
 8002930:	6033      	str	r3, [r6, #0]
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	0699      	lsls	r1, r3, #26
 8002936:	bf42      	ittt	mi
 8002938:	6833      	ldrmi	r3, [r6, #0]
 800293a:	3302      	addmi	r3, #2
 800293c:	6033      	strmi	r3, [r6, #0]
 800293e:	6825      	ldr	r5, [r4, #0]
 8002940:	f015 0506 	ands.w	r5, r5, #6
 8002944:	d106      	bne.n	8002954 <_printf_common+0x48>
 8002946:	f104 0a19 	add.w	sl, r4, #25
 800294a:	68e3      	ldr	r3, [r4, #12]
 800294c:	6832      	ldr	r2, [r6, #0]
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	42ab      	cmp	r3, r5
 8002952:	dc26      	bgt.n	80029a2 <_printf_common+0x96>
 8002954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002958:	6822      	ldr	r2, [r4, #0]
 800295a:	3b00      	subs	r3, #0
 800295c:	bf18      	it	ne
 800295e:	2301      	movne	r3, #1
 8002960:	0692      	lsls	r2, r2, #26
 8002962:	d42b      	bmi.n	80029bc <_printf_common+0xb0>
 8002964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002968:	4641      	mov	r1, r8
 800296a:	4638      	mov	r0, r7
 800296c:	47c8      	blx	r9
 800296e:	3001      	adds	r0, #1
 8002970:	d01e      	beq.n	80029b0 <_printf_common+0xa4>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	6922      	ldr	r2, [r4, #16]
 8002976:	f003 0306 	and.w	r3, r3, #6
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf02      	ittt	eq
 800297e:	68e5      	ldreq	r5, [r4, #12]
 8002980:	6833      	ldreq	r3, [r6, #0]
 8002982:	1aed      	subeq	r5, r5, r3
 8002984:	68a3      	ldr	r3, [r4, #8]
 8002986:	bf0c      	ite	eq
 8002988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800298c:	2500      	movne	r5, #0
 800298e:	4293      	cmp	r3, r2
 8002990:	bfc4      	itt	gt
 8002992:	1a9b      	subgt	r3, r3, r2
 8002994:	18ed      	addgt	r5, r5, r3
 8002996:	2600      	movs	r6, #0
 8002998:	341a      	adds	r4, #26
 800299a:	42b5      	cmp	r5, r6
 800299c:	d11a      	bne.n	80029d4 <_printf_common+0xc8>
 800299e:	2000      	movs	r0, #0
 80029a0:	e008      	b.n	80029b4 <_printf_common+0xa8>
 80029a2:	2301      	movs	r3, #1
 80029a4:	4652      	mov	r2, sl
 80029a6:	4641      	mov	r1, r8
 80029a8:	4638      	mov	r0, r7
 80029aa:	47c8      	blx	r9
 80029ac:	3001      	adds	r0, #1
 80029ae:	d103      	bne.n	80029b8 <_printf_common+0xac>
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b8:	3501      	adds	r5, #1
 80029ba:	e7c6      	b.n	800294a <_printf_common+0x3e>
 80029bc:	18e1      	adds	r1, r4, r3
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	2030      	movs	r0, #48	@ 0x30
 80029c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80029c6:	4422      	add	r2, r4
 80029c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80029cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80029d0:	3302      	adds	r3, #2
 80029d2:	e7c7      	b.n	8002964 <_printf_common+0x58>
 80029d4:	2301      	movs	r3, #1
 80029d6:	4622      	mov	r2, r4
 80029d8:	4641      	mov	r1, r8
 80029da:	4638      	mov	r0, r7
 80029dc:	47c8      	blx	r9
 80029de:	3001      	adds	r0, #1
 80029e0:	d0e6      	beq.n	80029b0 <_printf_common+0xa4>
 80029e2:	3601      	adds	r6, #1
 80029e4:	e7d9      	b.n	800299a <_printf_common+0x8e>
	...

080029e8 <_printf_i>:
 80029e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029ec:	7e0f      	ldrb	r7, [r1, #24]
 80029ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029f0:	2f78      	cmp	r7, #120	@ 0x78
 80029f2:	4691      	mov	r9, r2
 80029f4:	4680      	mov	r8, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	469a      	mov	sl, r3
 80029fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029fe:	d807      	bhi.n	8002a10 <_printf_i+0x28>
 8002a00:	2f62      	cmp	r7, #98	@ 0x62
 8002a02:	d80a      	bhi.n	8002a1a <_printf_i+0x32>
 8002a04:	2f00      	cmp	r7, #0
 8002a06:	f000 80d2 	beq.w	8002bae <_printf_i+0x1c6>
 8002a0a:	2f58      	cmp	r7, #88	@ 0x58
 8002a0c:	f000 80b9 	beq.w	8002b82 <_printf_i+0x19a>
 8002a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a18:	e03a      	b.n	8002a90 <_printf_i+0xa8>
 8002a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a1e:	2b15      	cmp	r3, #21
 8002a20:	d8f6      	bhi.n	8002a10 <_printf_i+0x28>
 8002a22:	a101      	add	r1, pc, #4	@ (adr r1, 8002a28 <_printf_i+0x40>)
 8002a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a28:	08002a81 	.word	0x08002a81
 8002a2c:	08002a95 	.word	0x08002a95
 8002a30:	08002a11 	.word	0x08002a11
 8002a34:	08002a11 	.word	0x08002a11
 8002a38:	08002a11 	.word	0x08002a11
 8002a3c:	08002a11 	.word	0x08002a11
 8002a40:	08002a95 	.word	0x08002a95
 8002a44:	08002a11 	.word	0x08002a11
 8002a48:	08002a11 	.word	0x08002a11
 8002a4c:	08002a11 	.word	0x08002a11
 8002a50:	08002a11 	.word	0x08002a11
 8002a54:	08002b95 	.word	0x08002b95
 8002a58:	08002abf 	.word	0x08002abf
 8002a5c:	08002b4f 	.word	0x08002b4f
 8002a60:	08002a11 	.word	0x08002a11
 8002a64:	08002a11 	.word	0x08002a11
 8002a68:	08002bb7 	.word	0x08002bb7
 8002a6c:	08002a11 	.word	0x08002a11
 8002a70:	08002abf 	.word	0x08002abf
 8002a74:	08002a11 	.word	0x08002a11
 8002a78:	08002a11 	.word	0x08002a11
 8002a7c:	08002b57 	.word	0x08002b57
 8002a80:	6833      	ldr	r3, [r6, #0]
 8002a82:	1d1a      	adds	r2, r3, #4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6032      	str	r2, [r6, #0]
 8002a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a90:	2301      	movs	r3, #1
 8002a92:	e09d      	b.n	8002bd0 <_printf_i+0x1e8>
 8002a94:	6833      	ldr	r3, [r6, #0]
 8002a96:	6820      	ldr	r0, [r4, #0]
 8002a98:	1d19      	adds	r1, r3, #4
 8002a9a:	6031      	str	r1, [r6, #0]
 8002a9c:	0606      	lsls	r6, r0, #24
 8002a9e:	d501      	bpl.n	8002aa4 <_printf_i+0xbc>
 8002aa0:	681d      	ldr	r5, [r3, #0]
 8002aa2:	e003      	b.n	8002aac <_printf_i+0xc4>
 8002aa4:	0645      	lsls	r5, r0, #25
 8002aa6:	d5fb      	bpl.n	8002aa0 <_printf_i+0xb8>
 8002aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	da03      	bge.n	8002ab8 <_printf_i+0xd0>
 8002ab0:	232d      	movs	r3, #45	@ 0x2d
 8002ab2:	426d      	negs	r5, r5
 8002ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ab8:	4859      	ldr	r0, [pc, #356]	@ (8002c20 <_printf_i+0x238>)
 8002aba:	230a      	movs	r3, #10
 8002abc:	e011      	b.n	8002ae2 <_printf_i+0xfa>
 8002abe:	6821      	ldr	r1, [r4, #0]
 8002ac0:	6833      	ldr	r3, [r6, #0]
 8002ac2:	0608      	lsls	r0, r1, #24
 8002ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ac8:	d402      	bmi.n	8002ad0 <_printf_i+0xe8>
 8002aca:	0649      	lsls	r1, r1, #25
 8002acc:	bf48      	it	mi
 8002ace:	b2ad      	uxthmi	r5, r5
 8002ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8002ad2:	4853      	ldr	r0, [pc, #332]	@ (8002c20 <_printf_i+0x238>)
 8002ad4:	6033      	str	r3, [r6, #0]
 8002ad6:	bf14      	ite	ne
 8002ad8:	230a      	movne	r3, #10
 8002ada:	2308      	moveq	r3, #8
 8002adc:	2100      	movs	r1, #0
 8002ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ae2:	6866      	ldr	r6, [r4, #4]
 8002ae4:	60a6      	str	r6, [r4, #8]
 8002ae6:	2e00      	cmp	r6, #0
 8002ae8:	bfa2      	ittt	ge
 8002aea:	6821      	ldrge	r1, [r4, #0]
 8002aec:	f021 0104 	bicge.w	r1, r1, #4
 8002af0:	6021      	strge	r1, [r4, #0]
 8002af2:	b90d      	cbnz	r5, 8002af8 <_printf_i+0x110>
 8002af4:	2e00      	cmp	r6, #0
 8002af6:	d04b      	beq.n	8002b90 <_printf_i+0x1a8>
 8002af8:	4616      	mov	r6, r2
 8002afa:	fbb5 f1f3 	udiv	r1, r5, r3
 8002afe:	fb03 5711 	mls	r7, r3, r1, r5
 8002b02:	5dc7      	ldrb	r7, [r0, r7]
 8002b04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b08:	462f      	mov	r7, r5
 8002b0a:	42bb      	cmp	r3, r7
 8002b0c:	460d      	mov	r5, r1
 8002b0e:	d9f4      	bls.n	8002afa <_printf_i+0x112>
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d10b      	bne.n	8002b2c <_printf_i+0x144>
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	07df      	lsls	r7, r3, #31
 8002b18:	d508      	bpl.n	8002b2c <_printf_i+0x144>
 8002b1a:	6923      	ldr	r3, [r4, #16]
 8002b1c:	6861      	ldr	r1, [r4, #4]
 8002b1e:	4299      	cmp	r1, r3
 8002b20:	bfde      	ittt	le
 8002b22:	2330      	movle	r3, #48	@ 0x30
 8002b24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b2c:	1b92      	subs	r2, r2, r6
 8002b2e:	6122      	str	r2, [r4, #16]
 8002b30:	f8cd a000 	str.w	sl, [sp]
 8002b34:	464b      	mov	r3, r9
 8002b36:	aa03      	add	r2, sp, #12
 8002b38:	4621      	mov	r1, r4
 8002b3a:	4640      	mov	r0, r8
 8002b3c:	f7ff fee6 	bl	800290c <_printf_common>
 8002b40:	3001      	adds	r0, #1
 8002b42:	d14a      	bne.n	8002bda <_printf_i+0x1f2>
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	b004      	add	sp, #16
 8002b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f043 0320 	orr.w	r3, r3, #32
 8002b54:	6023      	str	r3, [r4, #0]
 8002b56:	4833      	ldr	r0, [pc, #204]	@ (8002c24 <_printf_i+0x23c>)
 8002b58:	2778      	movs	r7, #120	@ 0x78
 8002b5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	6831      	ldr	r1, [r6, #0]
 8002b62:	061f      	lsls	r7, r3, #24
 8002b64:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b68:	d402      	bmi.n	8002b70 <_printf_i+0x188>
 8002b6a:	065f      	lsls	r7, r3, #25
 8002b6c:	bf48      	it	mi
 8002b6e:	b2ad      	uxthmi	r5, r5
 8002b70:	6031      	str	r1, [r6, #0]
 8002b72:	07d9      	lsls	r1, r3, #31
 8002b74:	bf44      	itt	mi
 8002b76:	f043 0320 	orrmi.w	r3, r3, #32
 8002b7a:	6023      	strmi	r3, [r4, #0]
 8002b7c:	b11d      	cbz	r5, 8002b86 <_printf_i+0x19e>
 8002b7e:	2310      	movs	r3, #16
 8002b80:	e7ac      	b.n	8002adc <_printf_i+0xf4>
 8002b82:	4827      	ldr	r0, [pc, #156]	@ (8002c20 <_printf_i+0x238>)
 8002b84:	e7e9      	b.n	8002b5a <_printf_i+0x172>
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	f023 0320 	bic.w	r3, r3, #32
 8002b8c:	6023      	str	r3, [r4, #0]
 8002b8e:	e7f6      	b.n	8002b7e <_printf_i+0x196>
 8002b90:	4616      	mov	r6, r2
 8002b92:	e7bd      	b.n	8002b10 <_printf_i+0x128>
 8002b94:	6833      	ldr	r3, [r6, #0]
 8002b96:	6825      	ldr	r5, [r4, #0]
 8002b98:	6961      	ldr	r1, [r4, #20]
 8002b9a:	1d18      	adds	r0, r3, #4
 8002b9c:	6030      	str	r0, [r6, #0]
 8002b9e:	062e      	lsls	r6, r5, #24
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	d501      	bpl.n	8002ba8 <_printf_i+0x1c0>
 8002ba4:	6019      	str	r1, [r3, #0]
 8002ba6:	e002      	b.n	8002bae <_printf_i+0x1c6>
 8002ba8:	0668      	lsls	r0, r5, #25
 8002baa:	d5fb      	bpl.n	8002ba4 <_printf_i+0x1bc>
 8002bac:	8019      	strh	r1, [r3, #0]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	6123      	str	r3, [r4, #16]
 8002bb2:	4616      	mov	r6, r2
 8002bb4:	e7bc      	b.n	8002b30 <_printf_i+0x148>
 8002bb6:	6833      	ldr	r3, [r6, #0]
 8002bb8:	1d1a      	adds	r2, r3, #4
 8002bba:	6032      	str	r2, [r6, #0]
 8002bbc:	681e      	ldr	r6, [r3, #0]
 8002bbe:	6862      	ldr	r2, [r4, #4]
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	f7fd fb2c 	bl	8000220 <memchr>
 8002bc8:	b108      	cbz	r0, 8002bce <_printf_i+0x1e6>
 8002bca:	1b80      	subs	r0, r0, r6
 8002bcc:	6060      	str	r0, [r4, #4]
 8002bce:	6863      	ldr	r3, [r4, #4]
 8002bd0:	6123      	str	r3, [r4, #16]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bd8:	e7aa      	b.n	8002b30 <_printf_i+0x148>
 8002bda:	6923      	ldr	r3, [r4, #16]
 8002bdc:	4632      	mov	r2, r6
 8002bde:	4649      	mov	r1, r9
 8002be0:	4640      	mov	r0, r8
 8002be2:	47d0      	blx	sl
 8002be4:	3001      	adds	r0, #1
 8002be6:	d0ad      	beq.n	8002b44 <_printf_i+0x15c>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	079b      	lsls	r3, r3, #30
 8002bec:	d413      	bmi.n	8002c16 <_printf_i+0x22e>
 8002bee:	68e0      	ldr	r0, [r4, #12]
 8002bf0:	9b03      	ldr	r3, [sp, #12]
 8002bf2:	4298      	cmp	r0, r3
 8002bf4:	bfb8      	it	lt
 8002bf6:	4618      	movlt	r0, r3
 8002bf8:	e7a6      	b.n	8002b48 <_printf_i+0x160>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4632      	mov	r2, r6
 8002bfe:	4649      	mov	r1, r9
 8002c00:	4640      	mov	r0, r8
 8002c02:	47d0      	blx	sl
 8002c04:	3001      	adds	r0, #1
 8002c06:	d09d      	beq.n	8002b44 <_printf_i+0x15c>
 8002c08:	3501      	adds	r5, #1
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	9903      	ldr	r1, [sp, #12]
 8002c0e:	1a5b      	subs	r3, r3, r1
 8002c10:	42ab      	cmp	r3, r5
 8002c12:	dcf2      	bgt.n	8002bfa <_printf_i+0x212>
 8002c14:	e7eb      	b.n	8002bee <_printf_i+0x206>
 8002c16:	2500      	movs	r5, #0
 8002c18:	f104 0619 	add.w	r6, r4, #25
 8002c1c:	e7f5      	b.n	8002c0a <_printf_i+0x222>
 8002c1e:	bf00      	nop
 8002c20:	08002d95 	.word	0x08002d95
 8002c24:	08002da6 	.word	0x08002da6

08002c28 <memmove>:
 8002c28:	4288      	cmp	r0, r1
 8002c2a:	b510      	push	{r4, lr}
 8002c2c:	eb01 0402 	add.w	r4, r1, r2
 8002c30:	d902      	bls.n	8002c38 <memmove+0x10>
 8002c32:	4284      	cmp	r4, r0
 8002c34:	4623      	mov	r3, r4
 8002c36:	d807      	bhi.n	8002c48 <memmove+0x20>
 8002c38:	1e43      	subs	r3, r0, #1
 8002c3a:	42a1      	cmp	r1, r4
 8002c3c:	d008      	beq.n	8002c50 <memmove+0x28>
 8002c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c46:	e7f8      	b.n	8002c3a <memmove+0x12>
 8002c48:	4402      	add	r2, r0
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	428a      	cmp	r2, r1
 8002c4e:	d100      	bne.n	8002c52 <memmove+0x2a>
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c5a:	e7f7      	b.n	8002c4c <memmove+0x24>

08002c5c <_sbrk_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4d06      	ldr	r5, [pc, #24]	@ (8002c78 <_sbrk_r+0x1c>)
 8002c60:	2300      	movs	r3, #0
 8002c62:	4604      	mov	r4, r0
 8002c64:	4608      	mov	r0, r1
 8002c66:	602b      	str	r3, [r5, #0]
 8002c68:	f7fd fe4e 	bl	8000908 <_sbrk>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	d102      	bne.n	8002c76 <_sbrk_r+0x1a>
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	b103      	cbz	r3, 8002c76 <_sbrk_r+0x1a>
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	bd38      	pop	{r3, r4, r5, pc}
 8002c78:	20000264 	.word	0x20000264

08002c7c <memcpy>:
 8002c7c:	440a      	add	r2, r1
 8002c7e:	4291      	cmp	r1, r2
 8002c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c84:	d100      	bne.n	8002c88 <memcpy+0xc>
 8002c86:	4770      	bx	lr
 8002c88:	b510      	push	{r4, lr}
 8002c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c92:	4291      	cmp	r1, r2
 8002c94:	d1f9      	bne.n	8002c8a <memcpy+0xe>
 8002c96:	bd10      	pop	{r4, pc}

08002c98 <_realloc_r>:
 8002c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9c:	4680      	mov	r8, r0
 8002c9e:	4615      	mov	r5, r2
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	b921      	cbnz	r1, 8002cae <_realloc_r+0x16>
 8002ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca8:	4611      	mov	r1, r2
 8002caa:	f7ff bc4b 	b.w	8002544 <_malloc_r>
 8002cae:	b92a      	cbnz	r2, 8002cbc <_realloc_r+0x24>
 8002cb0:	f7ff fbdc 	bl	800246c <_free_r>
 8002cb4:	2400      	movs	r4, #0
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cbc:	f000 f81a 	bl	8002cf4 <_malloc_usable_size_r>
 8002cc0:	4285      	cmp	r5, r0
 8002cc2:	4606      	mov	r6, r0
 8002cc4:	d802      	bhi.n	8002ccc <_realloc_r+0x34>
 8002cc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002cca:	d8f4      	bhi.n	8002cb6 <_realloc_r+0x1e>
 8002ccc:	4629      	mov	r1, r5
 8002cce:	4640      	mov	r0, r8
 8002cd0:	f7ff fc38 	bl	8002544 <_malloc_r>
 8002cd4:	4607      	mov	r7, r0
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d0ec      	beq.n	8002cb4 <_realloc_r+0x1c>
 8002cda:	42b5      	cmp	r5, r6
 8002cdc:	462a      	mov	r2, r5
 8002cde:	4621      	mov	r1, r4
 8002ce0:	bf28      	it	cs
 8002ce2:	4632      	movcs	r2, r6
 8002ce4:	f7ff ffca 	bl	8002c7c <memcpy>
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4640      	mov	r0, r8
 8002cec:	f7ff fbbe 	bl	800246c <_free_r>
 8002cf0:	463c      	mov	r4, r7
 8002cf2:	e7e0      	b.n	8002cb6 <_realloc_r+0x1e>

08002cf4 <_malloc_usable_size_r>:
 8002cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cf8:	1f18      	subs	r0, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bfbc      	itt	lt
 8002cfe:	580b      	ldrlt	r3, [r1, r0]
 8002d00:	18c0      	addlt	r0, r0, r3
 8002d02:	4770      	bx	lr

08002d04 <_init>:
 8002d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d06:	bf00      	nop
 8002d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	469e      	mov	lr, r3
 8002d0e:	4770      	bx	lr

08002d10 <_fini>:
 8002d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d12:	bf00      	nop
 8002d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d16:	bc08      	pop	{r3}
 8002d18:	469e      	mov	lr, r3
 8002d1a:	4770      	bx	lr
